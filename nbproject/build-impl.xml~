<?xml version="1.0" encoding="UTF-8"?>
<!--
        *** GENERATED FROM project.xml - DO NOT EDIT  ***
        ***         EDIT ../build.xml INSTEAD         ***

        For the purpose of easier reading the script
        is divided into following sections:
        - initialization
        - compilation
        - dist
        - execution
        - debugging
        - javadoc
        - test compilation
        - test execution
        - test debugging
        - cleanup

        -->
<project xmlns:webproject1="http://www.netbeans.org/ns/web-project/1" xmlns:webproject2="http://www.netbeans.org/ns/web-project/2" xmlns:webproject3="http://www.netbeans.org/ns/web-project/3" basedir=".." default="default" name="ClickForTechSupport-impl">
    <import file="ant-deploy.xml"/>
    <fail message="Please build using Ant 1.7.1 or higher.">
        <condition>
            <not>
                <antversion atleast="1.7.1"/>
            </not>
        </condition>
    </fail>
    <target depends="dist,javadoc" description="Build whole project." name="default"/>
    <!--
                INITIALIZATION SECTION
            -->
    <target name="-pre-init">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target depends="-pre-init" name="-init-private">
        <property file="nbproject/private/private.properties"/>
    </target>
    <target name="-pre-init-libraries">
        <property location=".\lib\nblibraries.properties" name="libraries.path"/>
        <dirname file="${libraries.path}" property="libraries.dir.nativedirsep"/>
        <pathconvert dirsep="/" property="libraries.dir">
            <path path="${libraries.dir.nativedirsep}"/>
        </pathconvert>
        <basename file="${libraries.path}" property="libraries.basename" suffix=".properties"/>
        <available file="${libraries.dir}/${libraries.basename}-private.properties" property="private.properties.available"/>
    </target>
    <target depends="-pre-init-libraries" if="private.properties.available" name="-init-private-libraries">
        <loadproperties encoding="ISO-8859-1" srcfile="${libraries.dir}/${libraries.basename}-private.properties">
            <filterchain>
                <replacestring from="$${base}" to="${libraries.dir}"/>
                <escapeunicode/>
            </filterchain>
        </loadproperties>
    </target>
    <target depends="-pre-init,-init-private,-init-private-libraries" name="-init-libraries">
        <loadproperties encoding="ISO-8859-1" srcfile="${libraries.path}">
            <filterchain>
                <replacestring from="$${base}" to="${libraries.dir}"/>
                <escapeunicode/>
            </filterchain>
        </loadproperties>
    </target>
    <target depends="-pre-init,-init-private,-init-libraries" name="-init-user">
        <property file="${user.properties.file}"/>
        <!-- The two properties below are usually overridden -->
        <!-- by the active platform. Just a fallback. -->
        <property name="default.javac.source" value="1.4"/>
        <property name="default.javac.target" value="1.4"/>
    </target>
    <target name="template.run" depends="template"
                    description="Run 'Device Communication Server' template ...">
        <echo message=" template run ..."/>
        <java fork="true" classname="org.opengts.servers.template.Main">
            <arg value="-conf=${Env.GTS_HOME}/default.conf"/>
            <arg value="-start"/>
            <classpath>
                <path refid="compile.classpath"/>
                <path location="${build.lib}/template.jar"/>
            </classpath>
        </java>
    </target>
        <!-- Build properties -->
  <property environment="Env"/>
  <property file="build.properties"/>

  <!-- optional source -->
  <available file="${src.gts}/org/opengts/opt/StartupInit.java"         type="file" property="exists.optional"/>
  <available file="${src.gts}/org/opengts/util/ExcelTools.java"         type="file" property="exists.exceltools"/>
  <available file="${src.gts}/org/opengts/util/PosixSIgnalHandler.java" type="file" property="exists.sigHandler"/>
  <!-- <available file="${war.home}/download" type="dir" property="exists.download"/> -->

  <!-- Server jar classpath -->
  <property name="Server_Jar_Classpath" value="gtsutils.jar gtsdb.jar ruledb.jar bcrossdb.jar optdb.jar custom.jar"/>

  <!-- jar classpath -->
  <path id="compile.classpath">
    <pathelement location="${build.home}"/>
    <fileset dir="${build.lib}">
        <include name="*.jar"/>
    </fileset>
  </path>

  <!-- war classpath -->
  <path id="compile.war.classpath">
    <pathelement location="${build.home}"/>
    <fileset dir="${build.lib}">
        <include name="*.jar"/>
    </fileset>
    <fileset dir="${lib.home}">
        <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${catalina.home}"> 
        <!-- Tomcat 5.5.XX -->
        <include name="common/lib/*.jar"/>
        <!-- Tomcat 6.0.XX -->
        <include name="lib/*.jar"/>
    </fileset>
  </path>
  
  <!-- ======================================================================== -->
  <!-- ======================================================================== -->

  <!-- Target: help -->
  <target name="help" 
    description="Clean/Build project">
    <echo message="clean    : Remove 'build' directory"/>
    <echo message="gtsdmtp  : Create OpenGTS DMTP server with the MySQL datastore"/>
    <echo message="events   : Create 'Events' Servlet WAR file"/>
    <echo message="track    : Create 'Track' Servlet WAR file"/>
    <echo message="mologogo : Create 'Mologogo' Servlet WAR file"/>
    <echo message="tools    : Create miscellaneous tools (ie. 'CheckInstall')"/>
    <echo message="all      : all of the above"/>
    <echo message="help     : This help"/>
  </target>
  
  <!-- Target: environment -->
  <target name="environment" 
    description="Display Environment settings">
    <echo message="GTS_HOME      = ${Env.GTS_HOME}"/>
    <echo message="GTS_CONF      = ${Env.GTS_CONF}"/>
    <echo message="GTS_TOOLS     = ${Env.GTS_TOOLS}"/>
    <echo message="JAVA_HOME     = ${Env.JAVA_HOME}"/>
    <echo message="CATALINA_HOME = ${Env.CATALINA_HOME}"/>
  </target>

  <!-- ======================================================================== -->
  <!-- ======================================================================== -->

  <!-- Target: all -->
  <target name="all" depends="clean,custom,compile" 
    description="Clean/Build Server and all WAR files">
    <echo message="Build 'all' complete."/>
  </target>

  

  
  <!-- Target: compile.base -->
  <target name="compile.base" depends="gtsutils,gtsdb,optjars,tools,gtsdmtp" 
    description="Build Base Libraries">
    <echo message="Libraries compiled ..."/>
  </target>

  <!-- Target: compile.servers -->
  <target name="compile.servers" depends="compile.base,gtsdmtp,icare,aspicore,astra,tk10x,sipgear,taip,lantrix,template" 
    description="Build Servers">
    <echo message="Servers compiled ..."/>
  </target>

  <!-- Target: compile.servlets -->
  <target name="compile.servlets" depends="compile.base,track,events,mologogo,gc101,gprmc,gpsmapper" 
    description="Build Servlet/War files">
    <echo message="Servlet/War file compiled ..."/>
  </target>

  <!-- ======================================================================== -->

  <!-- Target: tomcat "${catalina.home}" -->
  <target name="tomcat.env" depends="tomcat.home"
    description="Check for Tomcat environment variables"/>

  <!-- Target: tomcat "${catalina.home}" -->
  <target name="tomcat.home" 
    description="Check for CATALINA_HOME environment variable">
    <fail unless="Env.CATALINA_HOME">
        CATALINA_HOME environment variable has not been defined.
        (make sure CATALINA_HOME is defined and exported to the list of environment variables)
    </fail>
    <echo message="'CATALINA_HOME' is defined - ${Env.CATALINA_HOME}"/>
  </target>

  <!-- Target: tomcat.base "${catalina.base}" -->
  <target name="tomcat.base" 
    description="Check for CATALINA_BASE environment variable">
    <fail unless="Env.CATALINA_BASE">
        CATALINA_BASE environment variable has not been defined.
        (make sure CATALINA_BASE is defined and exported to the list of environment variables)
    </fail>
    <echo message="'CATALINA_BASE' is defined - ${Env.CATALINA_BASE}"/>
  </target>

  <!-- Target: tomcat.shexe "${catalina.base}" -->
  <target name="tomcat.shexe" depends="tomcat.sh_exe"/>
  <target name="tomcat.sh_exe" 
    description="Make Tomcat $CATALINA_HOME/bin/*.sh files executable">
    <fail unless="Env.CATALINA_HOME">
        CATALINA_HOME environment variable has not been defined.
        (make sure CATALINA_HOME is defined and exported to the list of environment variables)
    </fail>
    <chmod dir="${Env.CATALINA_HOME}/bin" perm="a+x" includes="*.sh"/>
    <echo message="'$CATALINA_HOME/bin/*.sh' files should now be executable"/>
  </target>

  <!-- ======================================================================== -->

  <!-- Target: 'gts_vars.env' -->
  <!-- ant -Dinstall.home=<dir> -Dinstall.user=<user> gts_vars.env -->
  <target name="gts_vars.env"
    description="Create 'gts_vars.env' ('Linux'/'Mac OS X' only)">
    <!-- Only supported on Linux and Mac OS X platforms -->
    <echo message="Ant properties:"/>
    <echo message="  install.home = ${install.home}"/>
    <echo message="  install.user = ${install.user}"/>
    <echo message="------------------------------------------------------------------------------------------"/>
    <exec executable="bin/makeGtsVarsEnv.sh" dir="${tools.home}" os="Linux, Mac OS X" failonerror="true">
        <!-- IE: bin/makeGtsVarsEnv.sh -dir /usr/local -user opengts -out ./gts_vars.env -->
        <arg value="-dir"/>
            <arg value="${install.home}"/>
        <arg value="-user"/>
            <arg value="${install.user}"/>
        <arg value="-out"/>
            <arg value="${basedir}/gts_vars.env"/>
    </exec>
  </target>

  <!-- Target: 'checkInstall' -->
  <target name="checkInstall"
    description="Run 'checkInstall'">
    <echo message="OS = ${os.name}"/>
    <exec executable="bin/checkInstall.sh"  dir="${tools.home}" os="Linux, Mac OS X"/>
    <exec executable="bin/checkInstall.bat" dir="${tools.home}" os="Windows"/>
  </target>

  <!-- ======================================================================== -->

  <!-- Target: prepare (create build directories) -->
  <target name="prepare" 
    description="Prepare for compile">
    <mkdir dir="${build.home}"/>
    <mkdir dir="${build.lib}"/>
    <property name="compile.classpath" refid="compile.classpath"/>
    <echo message="OS = ${os.name}"/>
    <echo message="JavaHome = ${java.home}"/>

    <!-- display Java version "java -version" on stdout -->
    <exec executable="java" dir="${java.home}" failonerror="true">
        <arg value="-version"/>
    </exec>

    <!-- copy library 'jars' to build directory "build/lib/" -->
    <copy todir="${build.lib}" failonerror="true" verbose="false">
        <fileset dir="${basedir}/lib/opendmtp">
           <include name="*.jar"/>
           <include name="dmtpserv.sh"/>
        </fileset>
        <fileset dir="${basedir}/lib/gtsopt">
           <include name="*.jar"/>
        </fileset>
    </copy>
    <chmod file="${build.lib}/dmtpserv.sh" perm="a+x"/>

    <!-- copy 'war' files to build directory "build/" -->
    <copy todir="${build.home}" failonerror="false" verbose="false">
        <fileset dir="${basedir}/lib/gtsopt">
           <include name="*.war"/>
        </fileset>
    </copy>

    <!-- copy '.class' files to build directory "build/" -->
    <echo message="(Ignore copy 'not found' warnings)"/>
    <copy todir="${build.home}" failonerror="false" verbose="false">
        <!-- ok if this directory does not exist -->
        <fileset dir="${basedir}/lib/gtsopt/classes">
           <include name="*.class"/>
        </fileset>
    </copy>

    <!-- copy JavaMail support jars build directory -->
    <mkdir dir="${basedir}/jlib/javamail"/>  <!-- make sure 'from' dir exists to avoid warnings -->
    <copy todir="${build.lib}" failonerror="false" verbose="false">
        <!-- ok if this file does not exist -->
        <fileset dir="${basedir}/jlib/javamail">
           <include name="activation.jar"/> <!-- not needed for JDK 6+ -->
           <include name="mail.jar"/>
        </fileset>
    </copy>

    <!-- copy Apache Derby support jars build directory -->
    <mkdir dir="${basedir}/jlib/jdbc.derby"/>  <!-- make sure 'from' dir exists to avoid warnings -->
    <copy todir="${build.lib}" failonerror="false" verbose="false">
        <!-- ok if this file does not exist -->
        <fileset dir="${basedir}/jlib/jdbc.derby">
           <include name="*.jar"/>
        </fileset>
    </copy>

    <!-- copy Microsoft SQL Server support jars build directory -->
    <mkdir dir="${basedir}/jlib/jdbc.sqlserver"/>  <!-- make sure 'from' dir exists to avoid warnings -->
    <copy todir="${build.lib}" failonerror="false" verbose="false">
        <!-- ok if this file does not exist -->
        <fileset dir="${basedir}/jlib/jdbc.sqlserver">
           <include name="*.jar"/>
        </fileset>
    </copy>

    <!-- copy MySQL support to build directory -->
    <mkdir dir="${basedir}/jlib/jdbc.mysql"/>  <!-- make sure 'from' dir exists to avoid warnings -->
    <copy todir="${build.lib}" failonerror="false" verbose="false">
        <!-- ok if this file does not exist -->
        <fileset dir="${basedir}/jlib/jdbc.mysql">
           <include name="mysql-connector-java-3.1.7-bin.jar"/>
        </fileset>
    </copy>

    <!-- copy Apache support to build directory -->
    <mkdir dir="${basedir}/jlib/apache"/>  <!-- make sure 'from' dir exists to avoid warnings -->
    <copy todir="${build.lib}" failonerror="false" verbose="false">
        <!-- ok if this file does not exist -->
        <fileset dir="${basedir}/jlib/apache">
           <include name="*.jar"/>
        </fileset>
    </copy>

  </target>

  <!-- ======================================================================== -->
  
  <!-- Target: gtsdmtp -->
  <target name="gtsdmtp.jar" depends="gtsdmtp"/>
  <target name="gtsdmtp" depends="prepare,gtsdb" 
    description="Create 'gtsdmtp.jar'">
    <echo message="Creating 'gtsdmtp.jar' ..."/>

    <!-- compile OpenGTS/OpenDMTP wrapper -->
    <javac srcdir="${src.gts}"
        includeAntRuntime="false"
        source="${compiler.source}"
        target="${compiler.target}"
        destdir="${build.home}"
        debug="${compile.debug}"
        nowarn="${compile.nowarn}"
        deprecation="${compile.deprecation}"
        optimize="${compile.optimize}">
        <compilerarg compiler="${compiler.compiler}" value="${compile.Xlint}"/>
        <classpath refid="compile.classpath"/>
        <include name="org/opengts/servers/gtsdmtp/**/*.java"/>
    </javac>

    <!-- create gtsdmtp.jar file -->
    <jar jarfile="${build.lib}/gtsdmtp.jar">
        <manifest>
            <attribute name="Class-Path" value="${Server_Jar_Classpath} dmtpserv.jar"/>
            <attribute name="Main-Class" value="org.opengts.servers.gtsdmtp.Main"/>
        </manifest>
        <fileset dir="${build.home}">
            <include name="org/opengts/servers/gtsdmtp/**/*.class"/>
        </fileset>
    </jar>

  </target>

  <!-- ======================================================================== -->

  <!-- Target: CompileTime.java -->
  <target name="CompileTime.java"
    description="Create CompileTime.java">

    <!-- (re)create compile time source file here? -->
    <echo message="Creating CompileTime module ..."/>
    <java classname="org.opengts.util.CompiletimeVars" fork="true" failonerror="true">
        <arg value="-configFileDir=${basedir}"/>
        <arg value="-template?=${basedir}/CompileTime.jtemp"/>
        <arg value="-package=org.opengts"/>
        <arg value="-output=${src.gts}/org/opengts/CompileTime.java"/>
        <arg value="-overwrite=true"/>
        <arg value="-extra=${CompiletimeVars.extra}"/>
        <arg value="${CompiletimeVars.arg}"/>
        <arg value="${CompiletimeVars.arg.1}"/>
        <arg value="${CompiletimeVars.arg.2}"/>
        <arg value="${CompiletimeVars.arg.3}"/>
        <classpath>
            <pathelement location="${build.lib}/gtsutils.jar"/>
        </classpath>
    </java>

  </target>

  <!-- Target: gtsdb.jar -->
  <target name="gtsdb.jar" depends="gtsdb"/>
  <target name="gtsdb" depends="prepare,gtsutils,CompileTime.java" 
    description="Create 'gtsdb.jar'">

    <!-- compile GTS db -->
    <echo message="Creating gtsdb.jar ..."/>
    <javac srcdir="${src.gts}"
        includeAntRuntime="false"
        encoding="UTF-8"
        source="${compiler.source}"
        target="${compiler.target}"
        destdir="${build.home}"
        debug="${compile.debug}"
        nowarn="${compile.nowarn}"
        deprecation="${compile.deprecation}"
        optimize="${compile.optimize}">
        <compilerarg compiler="${compiler.compiler}" value="${compile.Xlint}"/>
         <!-- <compilerarg value="-Xlint:unchecked"/> -->
        <classpath refid="compile.classpath"/>
      <!-- StartupInit.java, CompileTime.java -->
        <include name="org/opengts/*.java"/>
      <!-- [Reverse]GeocodeProvider -->
        <include name="org/opengts/geocoder/**/*.java"/>
        <include name="org/opengts/extra/geocoder/geoinverso/*.java"/>
        <include name="org/opengts/extra/geocoder/nacgeo/*.java"/>
      <!-- MobileLocationProvider -->
        <include name="org/opengts/cellid/**/*.java"/>
        <include name="org/opengts/extra/cellid/**/*.java"/>
        <exclude name="org/opengts/extra/cellid/locaid/*.java"/>
      <!-- Misc -->
        <include name="org/opengts/dbtypes/**/*.java"/>
        <include name="org/opengts/db/**/*.java"/>
        <include name="org/opengts/extra/tables/**/*.java"/>
        <include name="org/opengts/extra/rule/**/*.java"/>
        <include name="org/opengts/extra/service/**/*.java"/>
    </javac>

    <!-- copy Locale properties -->
    <copy todir="${build.home}" verbose="false">
        <fileset dir="${src.gts}">
            <include name="org/opengts/*.properties"/>
          <!-- [Reverse]GeocodeProvider -->
            <include name="org/opengts/geocoder/**/*.properties"/>
            <include name="org/opengts/extra/geocoder/geoinverso/*.properties"/>
            <include name="org/opengts/extra/geocoder/nacgeo/*.properties"/>
          <!-- MobileLocationProvider -->
            <include name="org/opengts/cellid/**/*.properties"/>
            <include name="org/opengts/extra/cellid/**/*.properties"/>
          <!-- Misc -->
            <include name="org/opengts/dbtypes/**/*.properties"/>
            <include name="org/opengts/db/**/*.properties"/>
            <include name="org/opengts/extra/tables/**/*.properties"/>
            <include name="org/opengts/extra/rule/**/*.properties"/>
            <include name="org/opengts/extra/service/**/*.properties"/>
        </fileset>
    </copy>

    <!-- create gtsdb.jar file -->
    <jar jarfile="${build.lib}/gtsdb.jar">
        <fileset dir="${build.home}">
          <!-- StartupInit, CompileTime -->
            <include name="org/opengts/*.class"/>
            <include name="org/opengts/*.properties"/>
          <!-- [Reverse]GeocodeProvider -->
            <include name="org/opengts/geocoder/**/*.class"/>
            <include name="org/opengts/geocoder/**/*.properties"/>
            <include name="org/opengts/extra/geocoder/geoinverso/*.class"/>
            <include name="org/opengts/extra/geocoder/geoinverso/*.properties"/>
            <include name="org/opengts/extra/geocoder/nacgeo/*.class"/>
            <include name="org/opengts/extra/geocoder/nacgeo/*.properties"/>
          <!-- MobileLocationProvider -->
            <include name="org/opengts/cellid/**/*.class"/>
            <include name="org/opengts/cellid/**/*.properties"/>
            <include name="org/opengts/extra/cellid/**/*.class"/>
            <include name="org/opengts/extra/cellid/**/*.properties"/>
          <!-- Misc -->
            <include name="org/opengts/dbtypes/**/*.class"/>
            <include name="org/opengts/dbtypes/**/*.properties"/>
            <include name="org/opengts/db/**/*.class"/>
            <include name="org/opengts/db/**/*.properties"/>
            <include name="org/opengts/extra/tables/**/*.class"/>
            <include name="org/opengts/extra/tables/**/*.properties"/>
            <include name="org/opengts/extra/rule/**/*.class"/>
            <include name="org/opengts/extra/rule/**/*.properties"/>
            <include name="org/opengts/extra/service/**/*.class"/>
            <include name="org/opengts/extra/service/**/*.properties"/>
        </fileset>
    </jar>

    <!-- create version script file -->
    <copy todir="${build.lib}" verbose="false">
        <fileset dir="${basedir}/bin">
           <include name="gtsdb.sh"/>
        </fileset>
    </copy>
    <chmod file="${build.lib}/gtsdb.sh" perm="a+x"/>

  </target>

  <!-- ======================================================================== -->

  <!-- Target: gtsutils.optional -->
  <target name="gtsutils.optional" if="exists.exceltools" depends="gtsutils.exceltools,gtsutils.sigHandler" 
    description="Compile 'gtsutils.jar' optional components">
  </target>

  <!-- Target: gtsutils.exceltools -->
  <target name="gtsutils.exceltools" if="exists.exceltools" depends="prepare" 
    description="Compile 'gtsutils.jar' Excel Tools components">
    <echo message="Compiling gtsutils.jar Excel Tools source ... "/>
    <!-- compile "ExcelTools.java" -->
    <!-- (continue if this compile fails) -->
    <javac srcdir="${src.gts}"
        includeAntRuntime="false"
        source="${compiler.source}"
        target="${compiler.target}"
        destdir="${build.home}"
        debug="${compile.debug}"
        nowarn="${compile.nowarn}"
        deprecation="${compile.deprecation}"
        optimize="${compile.optimize}"
        failonerror="false">
        <compilerarg line="-Xmaxerrs 1"/> <!-- "-Xmaxerrs 0" invokes a compiler bug -->
        <compilerarg compiler="${compiler.compiler}" value="-Xlint:all,-serial,-path"/>
        <classpath refid="compile.classpath"/>
        <include name="org/opengts/util/ExcelTools.java"/>
    </javac>
    <echo message="* Ignore any compile error that may be displayed above ..."/>
    <!-- -->
  </target>

  <!-- Target: gtsutils.sigHandler -->
  <target name="gtsutils.sigHandler" if="exists.sigHandler" depends="prepare" 
    description="Compile 'gtsutils.jar' Signal Handler components">
    <echo message="Compiling gtsutils.jar Signal Handler source ... "/>
    <!-- compile "PosixSignalHandler.java" -->
    <!-- (continue if this compile fails) -->
    <javac srcdir="${src.gts}"
        includeAntRuntime="false"
        source="${compiler.source}"
        target="${compiler.target}"
        destdir="${build.home}"
        debug="${compile.debug}"
        nowarn="${compile.nowarn}"
        deprecation="${compile.deprecation}"
        optimize="${compile.optimize}"
        failonerror="false">
        <compilerarg line="-Xmaxerrs 1"/> <!-- "-Xmaxerrs 0" invokes a compiler bug -->
        <compilerarg compiler="${compiler.compiler}" value="-Xlint:all,-serial,-path"/>
        <classpath refid="compile.classpath"/>
        <include name="org/opengts/util/PosixSignalHandler.java"/>
    </javac>
    <echo message="* Ignore any compile error that may be displayed above ..."/>
    <!-- -->
  </target>

  <!-- ======================================================================== -->

  <!-- Target: gtsutils.jar -->
  <target name="gtsutils" depends="gtsutils.jar"/>

  <!-- Target: gtsutils.compile -->
  <target name="gtsutils.compile" depends="prepare" 
    description="Compile 'gtsutils.jar' components">
    <echo message="Compiling gtsutils.jar source ... "/>

    <!--
    <echo message="Ignore any &quot;sun.reflect.Reflection&quot; warnings that may be displayed"/>
    -->

    <!-- compile GTS utils (sans "SendMailArgs.java", "ExcelTools.java") -->
    <javac srcdir="${src.gts}"
        includeAntRuntime="false"
        source="${compiler.source}"
        target="${compiler.target}"
        destdir="${build.home}"
        debug="${compile.debug}"
        nowarn="${compile.nowarn}"
        deprecation="${compile.deprecation}"
        optimize="${compile.optimize}">
        <!-- the utils dir has known unchecked warnings (ie. anything with "newInstance" etc) -->
        <compilerarg compiler="${compiler.compiler}" value="-Xlint:all,-serial,-path"/>
        <classpath refid="compile.classpath"/>
      <!-- Utils -->
        <include name="org/opengts/util/**/*.java"/>
        <exclude name="org/opengts/util/SendMailArgs.java"/>
        <exclude name="org/opengts/util/ExcelTools.java"/>
        <include name="org/opengts/extra/util/**/*.java"/>
      <!-- MobileLocationProvider (moved to 'gtsdb.jar') -->
        <!-- include name="org/opengts/cellid/**/*.java"/ -->
        <!-- include name="org/opengts/extra/cellid/**/*.java"/ -->
      <!-- Misc -->
        <include name="org/opengts/google/**/*.java"/>
        <include name="org/opengts/extra/shapefile/**/*.java"/>
    </javac>

    <!-- compile "SendMailArgs.java" -->
    <!-- (continue if this compile fails) -->
    <echo message="Compiling SendMailArgs.java (optional if 'mail.jar' not available) ... "/>
    <javac srcdir="${src.gts}"
        includeAntRuntime="false"
        source="${compiler.source}"
        target="${compiler.target}"
        destdir="${build.home}"
        debug="${compile.debug}"
        nowarn="${compile.nowarn}"
        deprecation="${compile.deprecation}"
        optimize="${compile.optimize}"
        failonerror="false">
        <compilerarg compiler="${compiler.compiler}" value="-Xlint:all,-serial,-path"/>
        <classpath refid="compile.classpath"/>
        <include name="org/opengts/util/SendMailArgs.java"/>
    </javac>
    <!-- -->

    <!-- compile GTS dbtools -->
    <echo message="Compiling dbtools ... "/>
    <javac srcdir="${src.gts}"
        includeAntRuntime="false"
        source="${compiler.source}"
        target="${compiler.target}"
        destdir="${build.home}"
        debug="${compile.debug}"
        nowarn="${compile.nowarn}"
        deprecation="${compile.deprecation}"
        optimize="${compile.optimize}">
        <!-- the dbtools dir has known unchecked warnings (ie. DBRecordIterator.java) -->
        <compilerarg compiler="${compiler.compiler}" value="-Xlint:all,-serial,-path"/>
        <classpath refid="compile.classpath"/>
        <include name="org/opengts/dbtools/**/*.java"/>
        <include name="org/opengts/extra/dbtools/**/*.java"/>
    </javac>

  </target>

  <!-- Target: gtsutils.jar -->
  <target name="gtsutils.jar" depends="prepare,gtsutils.compile,gtsutils.optional" 
    description="Create 'gtsutils.jar'">
    <echo message="Creating gtsutils.jar ... "/>

    <!-- copy Locale properties -->
    <copy todir="${build.home}" verbose="false">
        <fileset dir="${src.gts}">
          <!-- Util -->
            <include name="org/opengts/util/**/*.properties"/>
            <include name="org/opengts/extra/util/**/*.properties"/>
          <!-- MobileLocationProvider (moved to 'gtsdb.jar') -->
            <!-- include name="org/opengts/cellid/**/*.properties"/ -->
            <!-- include name="org/opengts/extra/cellid/**/*.properties"/ -->
          <!-- DB Tools -->
            <include name="org/opengts/dbtools/**/*.properties"/>
            <include name="org/opengts/extra/dbtools/**/*.properties"/>
          <!-- Misc -->
            <include name="org/opengts/google/**/*.properties"/>
            <include name="org/opengts/extra/shapefile/**/*.properties"/>
        </fileset>
    </copy>

    <!-- create gtsutils.jar file -->
    <jar jarfile="${build.lib}/gtsutils.jar">
        <fileset dir="${build.home}">
          <!-- Util -->
            <include name="org/opengts/util/**/*.class"/>
            <include name="org/opengts/util/**/*.properties"/>
            <include name="org/opengts/extra/util/**/*.class"/>
            <include name="org/opengts/extra/util/**/*.properties"/>
          <!-- MobileLocationProvider (moved to 'gtsdb.jar') -->
            <!-- include name="org/opengts/cellid/**/*.class"/ -->
            <!-- include name="org/opengts/extra/cellid/**/*.class"/ -->
            <!-- include name="org/opengts/cellid/**/*.properties"/ -->
            <!-- include name="org/opengts/extra/cellid/**/*.properties"/ -->
          <!-- DB tools -->
            <include name="org/opengts/dbtools/**/*.class"/>
            <include name="org/opengts/dbtools/**/*.properties"/>
            <include name="org/opengts/extra/dbtools/**/*.class"/>
            <include name="org/opengts/extra/dbtools/**/*.properties"/>
          <!-- Misc -->
            <include name="org/opengts/google/**/*.class"/>
            <include name="org/opengts/google/**/*.properties"/>
            <include name="org/opengts/extra/shapefile/**/*.class"/>
            <include name="org/opengts/extra/shapefile/**/*.properties"/>
        </fileset>
    </jar>

  </target>

  <!-- ======================================================================== -->

  <!-- Target: wartools.jar -->
  <target name="wartools.jar" depends="wartools"/>
  <target name="wartools" depends="tomcat.env,prepare,gtsdb" 
    description="Create 'wartools.jar'">
    <echo message="Creating 'wartools.jar' ..."/>
    <property name="compile.war.classpath" refid="compile.war.classpath"/>

    <!-- compile war tools -->
    <javac srcdir="${src.gts}"
        includeAntRuntime="false"
        source="${compiler.source}"
        target="${compiler.target}"
        destdir="${build.home}"
        debug="${compile.debug}"
        nowarn="${compile.nowarn}"
        deprecation="${compile.deprecation}"
        optimize="${compile.optimize}">
        <compilerarg compiler="${compiler.compiler}" value="${compile.Xlint}"/>
        <classpath refid="compile.war.classpath"/>
        <include name="org/opengts/war/tools/**/*.java"/>
        <include name="org/opengts/war/report/**/*.java"/>
        <include name="org/opengts/extra/war/report/**/*.java"/>
    </javac>

    <!-- copy Locale properties -->
    <copy todir="${build.home}" verbose="false">
        <fileset dir="${src.gts}">
            <include name="org/opengts/war/tools/**/*.properties"/>
            <include name="org/opengts/war/report/**/*.properties"/>
            <include name="org/opengts/extra/war/report/**/*.properties"/>
        </fileset>
    </copy>

    <!-- create wartools.jar file -->
    <jar jarfile="${build.lib}/wartools.jar">
        <fileset dir="${build.home}">
            <include name="org/opengts/war/tools/**/*.class"/>
            <include name="org/opengts/war/tools/**/*.properties"/>
            <include name="org/opengts/war/report/**/*.class"/>
            <include name="org/opengts/war/report/**/*.properties"/>
            <include name="org/opengts/extra/war/report/**/*.class"/>
            <include name="org/opengts/extra/war/report/**/*.properties"/>
        </fileset>
    </jar>

  </target>

  <!-- ======================================================================== -->

  <!-- Target: warmaps.jar -->
  <target name="warmaps.jar" depends="warmaps"/>
  <target name="warmaps" depends="tomcat.env,prepare,gtsdb,wartools" 
    description="Create 'warmaps.jar'">
    <echo message="Creating 'warmaps.jar' ..."/>
    <property name="compile.war.classpath" refid="compile.war.classpath"/>
    
    <!-- compile maps -->
    <javac srcdir="${src.gts}"
        includeAntRuntime="false"
        source="${compiler.source}"
        target="${compiler.target}"
        destdir="${build.home}"
        debug="${compile.debug}"
        nowarn="${compile.nowarn}"
        deprecation="${compile.deprecation}"
        optimize="${compile.optimize}">
        <compilerarg compiler="${compiler.compiler}" value="${compile.Xlint}"/>
        <classpath refid="compile.war.classpath"/>
        <include name="org/opengts/war/maps/**/*.java"/>
    </javac>

    <!-- copy Locale properties -->
    <copy todir="${build.home}" verbose="false">
        <fileset dir="${src.gts}">
            <include name="org/opengts/war/maps/**/*.properties"/>
        </fileset>
    </copy>

    <!-- create warmaps.jar file -->
    <jar jarfile="${build.lib}/warmaps.jar">
        <fileset dir="${build.home}">
            <include name="org/opengts/war/maps/**/*.class"/>
            <include name="org/opengts/war/maps/**/*.properties"/>
        </fileset>
    </jar>

  </target>

  <!-- ======================================================================== -->
  <!-- ======================================================================== -->

  <!-- track servlet build directory -->
  <property name="build.track" value="${build.home}/track"/>

  <!-- Target: track -->
  <target name="track.all" depends="track"/> 
  <target name="track" depends="track.compile,track.war" 
    description="Compile/Create 'track.war'">
    <echo message="'track.war' created."/>
  </target>

  <!-- Target: track.prepare -->
  <target name="track.prepare" depends="tomcat.env"
    description="Copy runtime configuration for 'track.war'">

    <!-- create required directories -->
    <mkdir dir="${build.track}"/>
    <mkdir dir="${build.track}/WEB-INF"/>
    <mkdir dir="${build.track}/WEB-INF/classes"/>
    <mkdir dir="${build.track}/WEB-INF/tld"/>
    <mkdir dir="${build.track}/images"/>
    <mkdir dir="${build.track}/js"/>
    <mkdir dir="${build.track}/css"/>

    <!-- .conf files -->
    <copy todir="${build.track}/WEB-INF" verbose="false">
        <fileset dir="${basedir}">
            <include name="webapp.conf"/>
            <include name="common.conf"/>
            <include name="system.conf"/>
            <include name="config.conf"/>
            <include name="custom.conf"/>           <!-- may not be present -->
            <include name="custom_gts.conf"/>       <!-- may not be present -->
            <include name="config_old.conf"/>       <!-- may not be present -->
            <include name="GTS_Enterprise"/>        <!-- may not be present -->
        </fileset>
    </copy>

    <!-- .xml files -->
    <copy todir="${build.track}/WEB-INF" verbose="false">
        <fileset dir="${basedir}">
            <include name="private.dtd"/>
            <include name="private.xml"/>
            <include name="private_release.xml"/>   <!-- may not be present -->
            <include name="reports.dtd"/>
            <include name="reports.xml"/>
            <include name="dcservers.dtd"/>
            <include name="dcservers.xml"/>
            <include name="dcservers_release.xml"/> <!-- may not be present -->
            <include name="timezones.conf"/>
        </fileset>
    </copy>

    <!-- copy "dcservers/dcserver_*" files (may not be present) -->
    <copy todir="${build.track}/WEB-INF" failonerror="false" verbose="false">
        <fileset dir="${basedir}/dcservers">
            <include name="dcserver_*.xml"/>
        </fileset>
    </copy>

    <!-- copy "private/private*" files -->
    <copy todir="${build.track}/WEB-INF" failonerror="false" verbose="false">
        <fileset dir="${basedir}/private">
            <include name="private*.xml"/>
        </fileset>
    </copy>

    <!-- copy "clients/gts/private" / "clients/gts/war/track/custom" files (may not be present) -->
    <copy todir="${build.track}/WEB-INF" failonerror="false" verbose="false">
        <fileset dir="${basedir}/clients/gts/private">
            <include name="private_common.xml"/>
        </fileset>
    </copy>
    <copy todir="${build.track}/custom" failonerror="false" verbose="false">
        <fileset dir="${basedir}/clients/gts/war/track/custom"/>
    </copy>

    <!-- copy images -->
    <copy todir="${build.track}/images" verbose="false">
        <fileset dir="${war.home}/track/images">
            <include name="*.gif"/>
            <include name="*.jpeg"/>
            <include name="*.jpg"/>
            <include name="*.png"/>
        </fileset>
    </copy>

    <!-- copy other non-Java files (js, css, png, etc) -->
    <copy todir="${build.track}" verbose="false">
        <fileset dir="${war.home}/track" excludes="**/*.java"/>
        <!-- this list may contain a custom "webapp.conf" file -->
    </copy>

  </target>

  <!-- Target: track.compile -->
  <target name="track.compile" depends="tomcat.env,prepare,gtsdb,wartools,warmaps,track.prepare" 
    description="Compile 'track.war' source">
    <echo message="Compiling 'track.war' servlet ..."/>
    <delete file="${build.home}/track.war"/>
    <property name="compile.war.classpath" refid="compile.war.classpath"/>

    <!-- compile track servlet -->
    <javac srcdir="${src.gts}"
        includeAntRuntime="false"
        source="${compiler.source}"
        target="${compiler.target}"
        destdir="${build.track}/WEB-INF/classes"
        debug="${compile.debug}"
        nowarn="${compile.nowarn}"
        deprecation="${compile.deprecation}"
        optimize="${compile.optimize}">
        <compilerarg compiler="${compiler.compiler}" value="${compile.Xlint}"/>
        <classpath refid="compile.war.classpath"/>
        <include name="org/opengts/war/track/**/*.java"/>
        <include name="org/opengts/extra/war/track/**/*.java"/>
        <include name="org/opengts/extra/war/service/Service.java"/>
    </javac>

    <!-- copy Locale property files -->
    <copy todir="${build.track}/WEB-INF/classes" verbose="false">
        <fileset dir="${src.gts}">
            <include name="org/opengts/war/track/**/*.properties"/>
            <include name="org/opengts/extra/war/track/**/*.properties"/>
            <include name="org/opengts/extra/war/service/*.properties"/>
        </fileset>
    </copy>

  </target>

  <!-- Target: track.war -->
  <target name="track.war" depends="track.prepare" 
    description="Create 'track.war' archive">
    <echo message="Creating 'track.war' archive ..."/>
    <delete file="${build.home}/track.war"/>

    <!-- create track.war file -->
    <war warfile="${build.home}/track.war" webxml="${build.track}/WEB-INF/web.xml">
        <classes dir="${build.track}/WEB-INF/classes">
            <include name="org/opengts/war/track/**/*"/>
            <include name="org/opengts/extra/war/track/**/*"/>
            <include name="org/opengts/extra/war/service/**/*"/>
            <include name="org/opengts/custom/*/**/*"/>
        </classes>
        <lib dir="${build.lib}">
            <include name="gtsutils.jar"/>
            <include name="gtsdb.jar"/>
            <include name="wartools.jar"/>
            <include name="ruledb.jar"/>
            <include name="ruletrack.jar"/>
            <include name="bcrossdb.jar"/>
            <include name="bcrosstrack.jar"/>
            <include name="warmaps.jar"/>
            <include name="optdb.jar"/>
            <include name="opttrack.jar"/>
            <include name="dmtpserv.jar"/>
            <include name="audit.jar"/>
            <include name="custom.jar"/>
            <include name="customtrack.jar"/>
        </lib>
        <fileset dir="${build.track}">
            <include name="**/*"/>
            <exclude name="WEB-INF/web.xml"/>
            <exclude name="WEB-INF/classes/**/*"/>
            <exclude name="WEB-INF/lib/**/*"/>
        </fileset>
    </war>

  </target>

  <!-- Target: track.deploy -->
  <target name="track.deploy" depends="track.war" 
    description="Deploy 'track.war' to Tomcat">
    <echo message="Deploying 'track.war' to ${catalina.base}/webapps/${track.deployWar}"/>
    <copy 
        file="${build.home}/track.war" 
        tofile="${catalina.base}/webapps/${track.deployWar}"
        overwrite="true"
        failonerror="true"
        verbose="true"
        />
    <echo message="Deployed ${catalina.base}/webapps/${track.deployWar}"/>
  </target>

  <!-- ======================================================================== -->
  <!-- ======================================================================== -->

  <!-- service servlet build directory -->
  <property name="build.service" value="${build.home}/service"/>

  <!-- Target: service -->
  <target name="service.all" depends="service"/> 
  <target name="service" depends="service.compile,service.war" 
    description="Compile/Create 'service.war'">
    <echo message="'service.war' created."/>
  </target>

  <!-- Target: service.prepare -->
  <target name="service.prepare" depends="tomcat.env"
    description="Copy runtime configuration for 'service.war'">

    <!-- create required directories -->
    <mkdir dir="${build.service}"/>
    <mkdir dir="${build.service}/WEB-INF"/>
    <mkdir dir="${build.service}/WEB-INF/classes"/>
    <mkdir dir="${build.service}/images/pp"/>
    <mkdir dir="${build.service}/js"/>

    <!-- .conf files -->
    <copy todir="${build.service}/WEB-INF" verbose="false">
        <fileset dir="${basedir}">
            <include name="webapp.conf"/>
            <include name="common.conf"/>
            <include name="system.conf"/>
            <include name="custom.conf"/>           <!-- may not be present -->
            <include name="custom_gts.conf"/>       <!-- may not be present -->
            <include name="config.conf"/>
            <include name="config_old.conf"/>       <!-- may not be present -->
        </fileset>
    </copy>

    <!-- .xml files -->
    <copy todir="${build.service}/WEB-INF" verbose="false">
        <fileset dir="${basedir}">
            <include name="private.dtd"/>
            <include name="private.xml"/>
            <include name="private_release.xml"/>
            <include name="reports.dtd"/>
            <include name="reports.xml"/>
            <include name="dcservers.dtd"/>
            <include name="dcservers.xml"/>
            <include name="dcservers_release.xml"/>
            <include name="dcserver_*.xml"/>
            <include name="timezones.conf"/>
        </fileset>
    </copy>

    <!-- copy private config files -->
    <copy todir="${build.service}/WEB-INF" failonerror="false" verbose="false">
        <fileset dir="${basedir}/private">
            <include name="private*.xml"/>
        </fileset>
    </copy>

    <!-- copy "clients/gts/private" files (may not be present) -->
    <copy todir="${build.service}/WEB-INF" failonerror="false" verbose="false">
        <fileset dir="${basedir}/clients/gts/private">
            <include name="private_common.xml"/>
        </fileset>
    </copy>

    <!-- copy pushpins -->
    <copy todir="${build.service}/images/pp" verbose="false">
        <fileset dir="${war.home}/track/images/pp">
            <include name="*.gif"/>
            <include name="*.jpeg"/>
            <include name="*.jpg"/>
            <include name="*.png"/>
        </fileset>
    </copy>

    <!-- copy other non-Java files (js, css, etc) -->
    <copy todir="${build.service}" verbose="false">
        <fileset dir="${war.home}/service" excludes="**/*.java"/>
        <!-- this list may contain a custom "webapp.conf" file -->
    </copy>

  </target>

  <!-- Target: service.compile -->
  <target name="service.compile" depends="tomcat.env,prepare,gtsdb,wartools,service.prepare" 
    description="Compile 'service.war' source">
    <echo message="Compiling 'service.war' servlet ..."/>
    <delete file="${build.home}/service.war"/>
    <property name="compile.war.classpath" refid="compile.war.classpath"/>

    <!-- compile service servlet -->
    <javac srcdir="${src.gts}"
        includeAntRuntime="false"
        source="${compiler.source}"
        target="${compiler.target}"
        destdir="${build.service}/WEB-INF/classes"
        debug="${compile.debug}"
        nowarn="${compile.nowarn}"
        deprecation="${compile.deprecation}"
        optimize="${compile.optimize}">
        <compilerarg compiler="${compiler.compiler}" value="-Xlint:unchecked"/> <!-- value="${compile.Xlint}"/> -->
        <classpath refid="compile.war.classpath"/>
        <include name="org/opengts/extra/service/ServiceXML.java"/>
        <include name="org/opengts/extra/war/service/**/*.java"/>
    </javac>

    <!-- copy Locale property files -->
    <copy todir="${build.service}/WEB-INF/classes" verbose="false">
        <fileset dir="${src.gts}">
            <include name="org/opengts/extra/war/service/**/*.properties"/>
        </fileset>
    </copy>

  </target>

  <!-- Target: service.war -->
  <target name="service.war" depends="service.prepare" 
    description="Create 'service.war' archive">
    <echo message="Creating 'service.war' archive ..."/>
    <delete file="${build.home}/service.war"/>

    <!-- create service.war file -->
    <war warfile="${build.home}/service.war" webxml="${build.service}/WEB-INF/web.xml">
        <classes dir="${build.service}/WEB-INF/classes">
            <include name="org/opengts/extra/service/ServiceXML.class"/>
            <include name="org/opengts/extra/war/service/**/*"/>
        </classes>
        <lib dir="${build.lib}">
            <include name="gtsutils.jar"/>
            <include name="gtsdb.jar"/>
            <include name="wartools.jar"/>
            <include name="ruledb.jar"/>
            <include name="ruletrack.jar"/>   
            <include name="bcrossdb.jar"/>
            <include name="bcrosstrack.jar"/>
            <include name="warmaps.jar"/>
            <include name="optdb.jar"/>
            <include name="opttrack.jar"/>
            <include name="dmtpserv.jar"/>
            <include name="custom.jar"/>
        </lib>
        <fileset dir="${build.service}">
            <include name="**/*"/>
            <exclude name="WEB-INF/web.xml"/>
            <exclude name="WEB-INF/classes/**/*"/>
            <exclude name="WEB-INF/lib/**/*"/>
        </fileset>
    </war>

  </target>

  <!-- Target: service.deploy -->
  <target name="service.deploy" depends="service.war" 
    description="Deploy 'service.war' to Tomcat">
    <echo message="Deploying 'service.war' to ${catalina.base}/webapps/${service.deployWar}"/>
    <copy 
        file="${build.home}/service.war" 
        tofile="${catalina.base}/webapps/${service.deployWar}"
        overwrite="true" 
        failonerror="true" 
        verbose="true"
        />
    <echo message="Deployed ${catalina.base}/webapps/${service.deployWar}"/>
  </target>

  <!-- ======================================================================== -->
  <!-- ======================================================================== -->

  <!-- events servlet build directory -->
  <property name="build.events" value="${build.home}/events"/>

  <!-- Target: events -->
  <target name="events.all" depends="events"/> 
  <target name="events" depends="events.compile,events.war" 
    description="Compile/Create 'events.war'">
    <echo message="'events.war' created."/>
  </target>

  <!-- Target: events.compile -->
  <target name="events.compile" depends="tomcat.env,prepare,gtsdb,wartools" 
    description="Compile 'events.war' source">

    <echo message="Compiling 'events.war' servlet ..."/>
    <delete file="${build.home}/events.war"/>
    <mkdir dir="${build.events}"/>
    <mkdir dir="${build.events}/WEB-INF"/>
    <mkdir dir="${build.events}/WEB-INF/classes"/>
    <mkdir dir="${build.events}/WEB-INF/tlds"/>
    <property name="compile.war.classpath" refid="compile.war.classpath"/>

    <!-- compile event servlet -->
    <javac srcdir="${src.gts}"
        includeAntRuntime="false"
        source="${compiler.source}"
        target="${compiler.target}"
        destdir="${build.events}/WEB-INF/classes"
        debug="${compile.debug}"
        nowarn="${compile.nowarn}"
        deprecation="${compile.deprecation}"
        optimize="${compile.optimize}">
        <compilerarg compiler="${compiler.compiler}" value="${compile.Xlint}"/>
        <classpath refid="compile.war.classpath"/>
        <include name="org/opengts/war/events/**/*.java"/>
    </javac>

    <!-- .conf files -->
    <copy todir="${build.events}/WEB-INF" verbose="false">
        <fileset dir="${basedir}">
            <include name="webapp.conf"/>
            <include name="common.conf"/>
            <include name="system.conf"/>
            <include name="custom.conf"/>           <!-- may not be present -->
            <include name="custom_gts.conf"/>       <!-- may not be present -->
            <include name="config.conf"/>
            <include name="config_old.conf"/>       <!-- may not be present -->
        </fileset>
    </copy>

    <!-- override .conf -->
    <copy todir="${build.events}" verbose="false" overwrite="true">
        <fileset dir="${war.home}/events" excludes="**/*.java"/>
        <!-- this list may contain a custom "webapp.conf" file -->
    </copy>

    <!-- "private*.xml" files -->
    <copy todir="${build.events}/WEB-INF" verbose="false">
        <fileset dir="${basedir}">
            <include name="private.dtd"/>
            <include name="private*.xml"/>
        </fileset>
    </copy>

    <!-- "private/private*.xml" files -->
    <copy todir="${build.events}/WEB-INF" failonerror="false" verbose="false">
        <fileset dir="${basedir}/private">
            <include name="private*.xml"/>
        </fileset>
    </copy>

    <!-- "clients/gts/private/private_common.xml" file (may not be present) -->
    <copy todir="${build.events}/WEB-INF" failonerror="false" verbose="false">
        <fileset dir="${basedir}/clients/gts/private">
            <include name="private_common.xml"/>
        </fileset>
    </copy>

  </target>
  
  <!-- Target: events.war -->
  <target name="events.war" depends="" 
    description="Create 'events.war' archive">
    <echo message="Creating 'events.war' file ..."/>

    <!-- create events.war file -->
    <delete file="${build.home}/events.war"/>
    <war warfile="${build.home}/events.war" webxml="${build.events}/WEB-INF/web.xml">
        <classes dir="${build.events}/WEB-INF/classes">
            <include name="org/opengts/war/events/**/*"/>
        </classes>
        <lib dir="${build.lib}">
            <include name="gtsutils.jar"/>
            <include name="gtsdb.jar"/>
            <include name="wartools.jar"/>
            <include name="optdb.jar"/>
            <include name="ruledb.jar"/>
            <include name="bcrossdb.jar"/>
            <include name="custom.jar"/>
        </lib>
        <fileset dir="${build.events}">
            <include name="**/*"/>
            <exclude name="WEB-INF/web.xml"/>
            <exclude name="WEB-INF/classes/**/*"/>
            <exclude name="WEB-INF/lib/**/*"/>
        </fileset>
    </war>

  </target>

  <!-- Target: events.deploy -->
  <target name="events.deploy" depends="events.war" 
    description="Deploy 'events.war' to Tomcat">
    <echo message="Deploying 'events.war' to ${catalina.base}/webapps/${events.deployWar}"/>
    <copy 
        file="${build.home}/events.war" 
        tofile="${catalina.base}/webapps/${events.deployWar}"
        overwrite="true" 
        failonerror="true" 
        verbose="true"
        />
    <echo message="Deployed ${catalina.base}/webapps/${events.deployWar}"/>
  </target>

  <!-- ======================================================================== -->
  <!-- ======================================================================== -->

  <!-- mologogo servlet build directory -->
  <property name="build.mologogo" value="${build.home}/mologogo"/>

  <!-- Target: mologogo -->
  <target name="mologogo.all" depends="mologogo"/> 
  <target name="mologogo" depends="mologogo.compile,mologogo.war" 
    description="Compile/Create 'mologogo.war'">
    <echo message="'mologogo.war' created."/>
  </target>

  <!-- Target: mologogo.compile -->
  <target name="mologogo.compile" depends="tomcat.env,prepare,gtsdb,wartools" 
    description="Compile 'mologogo.war' source">
    <echo message="Compiling 'mologogo.war' servlet ..."/>
    <delete file="${build.home}/mologogo.war"/>
    <mkdir dir="${build.mologogo}"/>
    <mkdir dir="${build.mologogo}/WEB-INF"/>
    <mkdir dir="${build.mologogo}/WEB-INF/classes"/>
    <mkdir dir="${build.mologogo}/WEB-INF/tlds"/>
    <property name="compile.war.classpath" refid="compile.war.classpath"/>

    <javac srcdir="${src.gts}"
        includeAntRuntime="false"
        source="${compiler.source}"
        target="${compiler.target}"
        destdir="${build.mologogo}/WEB-INF/classes"
        debug="${compile.debug}"
        nowarn="${compile.nowarn}"
        deprecation="${compile.deprecation}"
        optimize="${compile.optimize}">
        <compilerarg compiler="${compiler.compiler}" value="${compile.Xlint}"/>
        <classpath refid="compile.war.classpath"/>
        <include name="org/opengts/war/mologogo/**/*.java"/>
    </javac>

    <!-- .conf files -->
    <copy todir="${build.mologogo}/WEB-INF" verbose="false">
        <fileset dir="${basedir}">
            <include name="webapp.conf"/>
            <include name="common.conf"/>
            <include name="system.conf"/>
            <include name="custom.conf"/>           <!-- may not be present -->
            <include name="custom_gts.conf"/>       <!-- may not be present -->
            <include name="config.conf"/>
            <include name="config_old.conf"/>       <!-- may not be present -->
        </fileset>
    </copy>

    <!-- override .conf -->
    <copy todir="${build.mologogo}" verbose="false" overwrite="true">
        <fileset dir="${war.home}/mologogo" excludes="**/*.java"/>
        <!-- this list may contain a custom "webapp.conf" file -->
    </copy>

    <!-- .xml files -->
    <copy todir="${build.mologogo}/WEB-INF" verbose="false">
        <fileset dir="${basedir}">
            <include name="private.dtd"/>
            <include name="private*.xml"/>
        </fileset>
    </copy>

    <!-- .xml files -->
    <copy todir="${build.mologogo}/WEB-INF" failonerror="false" verbose="false">
        <fileset dir="${basedir}/private">
            <include name="private*.xml"/>
        </fileset>
    </copy>

    <!-- copy "clients/gts/private" files (may not be present) -->
    <copy todir="${build.mologogo}/WEB-INF" failonerror="false" verbose="false">
        <fileset dir="${basedir}/clients/gts/private">
            <include name="private_common.xml"/>
        </fileset>
    </copy>

  </target>

  <!-- Target: mologogo.war -->
  <target name="mologogo.war" depends=""
    description="Create 'mologogo.war' archive">
    <echo message="Creating 'mologogo.war' archive ..."/>
    <delete file="${build.home}/mologogo.war"/>

    <!-- create mologogo.war file -->
    <war warfile="${build.home}/mologogo.war" webxml="${build.mologogo}/WEB-INF/web.xml">
        <classes dir="${build.mologogo}/WEB-INF/classes">
            <include name="org/opengts/war/mologogo/**/*"/>
        </classes>
        <lib dir="${build.lib}">
            <include name="gtsutils.jar"/>
            <include name="gtsdb.jar"/>
            <include name="wartools.jar"/>
            <include name="optdb.jar"/>
            <include name="ruledb.jar"/>
            <include name="bcrossdb.jar"/>
            <include name="custom.jar"/>
        </lib>
        <fileset dir="${build.mologogo}">
            <include name="**/*"/>
            <exclude name="WEB-INF/web.xml"/>
            <exclude name="WEB-INF/classes/**/*"/>
            <exclude name="WEB-INF/lib/**/*"/>
        </fileset>
    </war>

  </target>

  <!-- Target: mologogo.deploy -->
  <target name="mologogo.deploy" depends="mologogo.war" 
    description="Deploy 'mologogo.war' to Tomcat">
    <echo message="Deploying 'mologogo.war' to ${catalina.base}/webapps/${mologogo.deployWar}"/>
    <copy 
        file="${build.home}/mologogo.war" 
        tofile="${catalina.base}/webapps/${mologogo.deployWar}"
        overwrite="true" 
        failonerror="true" 
        verbose="true"
        />
    <echo message="Deployed ${catalina.base}/webapps/${mologogo.deployWar}"/>
  </target>

  <!-- ======================================================================== -->
  
  <!-- GPRMC servlet build directory -->
  <property name="build.gprmc" value="${build.home}/gprmc"/>

  <!-- Target: gprmc -->
  <target name="gprmc.all" depends="gprmc"/> 
  <target name="gprmc" depends="gprmc.compile,gprmc.war" 
    description="Compile/Create 'gprmc.war'">
    <echo message="'gprmc.war' created."/>
  </target>

  <!-- Target: gprmc.compile -->
  <target name="gprmc.compile" depends="tomcat.env,prepare,gtsdb,wartools" 
    description="Compile 'gprmc.war' source">
    <echo message="Compiling 'gprmc.war' servlet ..."/>
    <delete file="${build.home}/gprmc.war"/>
    <mkdir dir="${build.gprmc}"/>
    <mkdir dir="${build.gprmc}/WEB-INF"/>
    <mkdir dir="${build.gprmc}/WEB-INF/classes"/>
    <mkdir dir="${build.gprmc}/WEB-INF/tlds"/>
    <property name="compile.war.classpath" refid="compile.war.classpath"/>

    <javac srcdir="${src.gts}"
        includeAntRuntime="false"
        source="${compiler.source}"
        target="${compiler.target}"
        destdir="${build.gprmc}/WEB-INF/classes"
        debug="${compile.debug}"
        nowarn="${compile.nowarn}"
        deprecation="${compile.deprecation}"
        optimize="${compile.optimize}">
        <compilerarg compiler="${compiler.compiler}" value="${compile.Xlint}"/>
        <classpath refid="compile.war.classpath"/>
        <include name="org/opengts/war/gprmc/**/*.java"/>
    </javac>

    <!-- .conf files -->
    <copy todir="${build.gprmc}/WEB-INF" verbose="false">
        <fileset dir="${basedir}">
            <include name="webapp.conf"/>
            <include name="common.conf"/>
            <include name="system.conf"/>
            <include name="custom.conf"/>           <!-- may not be present -->
            <include name="custom_gts.conf"/>       <!-- may not be present -->
            <include name="config.conf"/>
            <include name="config_old.conf"/>       <!-- may not be present -->
        </fileset>
    </copy>

    <!-- override .conf -->
    <copy todir="${build.gprmc}" verbose="false" overwrite="true">
        <fileset dir="${war.home}/gprmc" excludes="**/*.java"/>
        <!-- this list may contain a custom "webapp.conf" file -->
    </copy>

    <!-- .xml files -->
    <copy todir="${build.gprmc}/WEB-INF" verbose="false">
        <fileset dir="${basedir}">
            <include name="private.dtd"/>
            <include name="private*.xml"/>
        </fileset>
    </copy>

    <!-- .xml files -->
    <copy todir="${build.gprmc}/WEB-INF" failonerror="false" verbose="false">
        <fileset dir="${basedir}/private">
            <include name="private*.xml"/>
        </fileset>
    </copy>

    <!-- copy "clients/gts/private" files (may not be present) -->
    <copy todir="${build.gprmc}/WEB-INF" failonerror="false" verbose="false">
        <fileset dir="${basedir}/clients/gts/private">
            <include name="private_common.xml"/>
        </fileset>
    </copy>

  </target>

  <!-- Target: gprmc.war -->
  <target name="gprmc.war" depends=""
    description="Create 'gprmc.war' archive">
    <echo message="Creating 'gprmc.war' archive ..."/>
    <delete file="${build.home}/gprmc.war"/>

    <!-- create gprmc.war file -->
    <war warfile="${build.home}/gprmc.war" webxml="${build.gprmc}/WEB-INF/web.xml">
        <classes dir="${build.gprmc}/WEB-INF/classes">
            <include name="org/opengts/war/gprmc/**/*"/>
        </classes>
        <lib dir="${build.lib}">
            <include name="gtsutils.jar"/>
            <include name="gtsdb.jar"/>
            <include name="wartools.jar"/>
            <include name="optdb.jar"/>
            <include name="ruledb.jar"/>
            <include name="bcrossdb.jar"/>
            <include name="custom.jar"/>
        </lib>
        <fileset dir="${build.gprmc}">
            <include name="**/*"/>
            <exclude name="WEB-INF/web.xml"/>
            <exclude name="WEB-INF/classes/**/*"/>
            <exclude name="WEB-INF/lib/**/*"/>
        </fileset>
    </war>

  </target>

  <!-- Target: gprmc.deploy -->
  <target name="gprmc.deploy" depends="gprmc.war" 
    description="Deploy 'gprmc.war' to Tomcat">
    <echo message="Deploying 'gprmc.war' to ${catalina.base}/webapps/${gprmc.deployWar}"/>
    <copy 
        file="${build.home}/gprmc.war" 
        tofile="${catalina.base}/webapps/${gprmc.deployWar}"
        overwrite="true" 
        failonerror="true" 
        verbose="true"
        />
    <echo message="Deployed ${catalina.base}/webapps/${gprmc.deployWar}"/>
  </target>

  <!-- ======================================================================== -->

  <!-- gc101 servlet build directory -->
  <property name="build.gc101" value="${build.home}/gc101"/>

  <!-- Target: gc101 -->
  <target name="gc101.all" depends="gc101"/> 
  <target name="gc101" depends="gc101.compile,gc101.war" 
    description="Compile/Create 'gc101.war'">
    <echo message="'gc101.war' created."/>
  </target>

  <!-- Target: gc101.compile -->
  <target name="gc101.compile" depends="tomcat.env,prepare,gtsdb,wartools" 
    description="Compile 'gc101.war' source">
    <echo message="Compiling 'gc101.war' servlet ..."/>
    <delete file="${build.home}/gc101.war"/>
    <mkdir dir="${build.gc101}"/>
    <mkdir dir="${build.gc101}/WEB-INF"/>
    <mkdir dir="${build.gc101}/WEB-INF/classes"/>
    <property name="compile.war.classpath" refid="compile.war.classpath"/>

    <!-- compile gc101 server -->
    <javac srcdir="${src.gts}"
        includeAntRuntime="false"
        source="${compiler.source}"
        target="${compiler.target}"
        destdir="${build.gc101}/WEB-INF/classes"
        debug="${compile.debug}"
        nowarn="${compile.nowarn}"
        deprecation="${compile.deprecation}"
        optimize="${compile.optimize}">
        <compilerarg compiler="${compiler.compiler}" value="${compile.Xlint}"/>
        <classpath refid="compile.war.classpath"/>
        <include name="org/opengts/war/gc101/**/*.java"/>
    </javac>

    <!-- copy .conf files -->
    <copy todir="${build.gc101}/WEB-INF" verbose="false">
        <fileset dir="${basedir}">
            <include name="webapp.conf"/>
            <include name="common.conf"/>
            <include name="system.conf"/>
            <include name="custom.conf"/>           <!-- may not be present -->
            <include name="custom_gts.conf"/>       <!-- may not be present -->
            <include name="config.conf"/>
            <include name="config_old.conf"/>       <!-- may not be present -->
        </fileset>
    </copy>

    <!-- override .conf -->
    <copy todir="${build.gc101}" verbose="false">
        <fileset dir="${war.home}/gc101" excludes="**/*.java"/>
        <!-- this list may contain a custom "webapp.conf" file -->
    </copy>

    <!-- copy other config files -->
    <copy todir="${build.gc101}/WEB-INF" verbose="false">
        <fileset dir="${basedir}">
            <include name="private.dtd"/>
            <include name="private*.xml"/>
        </fileset>
    </copy>

    <!-- copy private config files -->
    <copy todir="${build.gc101}/WEB-INF" failonerror="false" verbose="false">
        <fileset dir="${basedir}/private">
            <include name="private*.xml"/>
        </fileset>
    </copy>

    <!-- copy "clients/gts/private" files (may not be present) -->
    <copy todir="${build.gc101}/WEB-INF" failonerror="false" verbose="false">
        <fileset dir="${basedir}/clients/gts/private">
            <include name="private_common.xml"/>
        </fileset>
    </copy>

  </target>

  <!-- Target: gc101.war -->
  <target name="gc101.war" depends="" 
    description="Create 'gc101.war' archive">
    <echo message="Creating 'gc101.war' archive ..."/>
    <delete file="${build.home}/gc101.war"/>

    <!-- create gc101.war file -->
    <war warfile="${build.home}/gc101.war" webxml="${build.gc101}/WEB-INF/web.xml">
        <classes dir="${build.gc101}/WEB-INF/classes">
            <include name="**/*"/>
        </classes>
        <lib dir="${build.lib}">
            <include name="gtsutils.jar"/>
            <include name="gtsdb.jar"/>
            <include name="wartools.jar"/>
            <include name="optdb.jar"/>
            <include name="ruledb.jar"/>
            <include name="bcrossdb.jar"/>
            <include name="custom.jar"/>
        </lib>
        <fileset dir="${build.gc101}">
            <include name="**/*"/>
            <exclude name="WEB-INF/web.xml"/>
            <exclude name="WEB-INF/classes/**/*"/>
            <exclude name="WEB-INF/lib/**/*"/>
        </fileset>
    </war>

  </target>

  <!-- Target: gc101.deploy -->
  <target name="gc101.deploy" depends="gc101.war" 
    description="Deploy 'gc101.war' to Tomcat">
    <echo message="Deploying 'gc101.war' to ${catalina.base}/webapps/${gc101.deployWar}"/>
    <copy 
        file="${build.home}/gc101.war" 
        tofile="${catalina.base}/webapps/${gc101.deployWar}"
        overwrite="true" 
        failonerror="true" 
        verbose="true"
        />
    <echo message="Deployed ${catalina.base}/webapps/${gc101.deployWar}"/>
  </target>

  <!-- ======================================================================== -->
  
  <!-- GPSMapper servlet build directory -->
  <property name="build.gpsmapper" value="${build.home}/gpsmapper"/>

  <!-- Target: gpsmapper -->
  <target name="gpsmapper.all" depends="gpsmapper"/> 
  <target name="gpsmapper" depends="gpsmapper.compile,gpsmapper.war" 
    description="Compile/Create 'gpsmapper.war'">
    <echo message="'gpsmapper.war' created."/>
  </target>

  <!-- Target: gpsmapper.compile -->
  <target name="gpsmapper.compile" depends="tomcat.env,prepare,gtsdb,wartools" 
    description="Compile 'gpsmapper.war' source">
    <echo message="Compiling 'gpsmapper.war' servlet ..."/>
    <delete file="${build.home}/gpsmapper.war"/>
    <mkdir dir="${build.gpsmapper}"/>
    <mkdir dir="${build.gpsmapper}/WEB-INF"/>
    <mkdir dir="${build.gpsmapper}/WEB-INF/classes"/>
    <mkdir dir="${build.gpsmapper}/WEB-INF/tlds"/>
    <property name="compile.war.classpath" refid="compile.war.classpath"/>

    <javac srcdir="${src.gts}"
        includeAntRuntime="false"
        source="${compiler.source}"
        target="${compiler.target}"
        destdir="${build.gpsmapper}/WEB-INF/classes"
        debug="${compile.debug}"
        nowarn="${compile.nowarn}"
        deprecation="${compile.deprecation}"
        optimize="${compile.optimize}">
        <compilerarg compiler="${compiler.compiler}" value="${compile.Xlint}"/>
        <classpath refid="compile.war.classpath"/>
        <include name="org/opengts/war/gpsmapper/**/*.java"/>
    </javac>

    <copy todir="${build.gpsmapper}/WEB-INF" verbose="false">
        <fileset dir="${basedir}">
            <include name="webapp.conf"/>
            <include name="common.conf"/>
            <include name="system.conf"/>
            <include name="custom.conf"/>           <!-- may not be present -->
            <include name="custom_gts.conf"/>       <!-- may not be present -->
            <include name="config.conf"/>
            <include name="config_old.conf"/>       <!-- may not be present -->
        </fileset>
    </copy>

    <copy todir="${build.gpsmapper}" verbose="false">
        <fileset dir="${war.home}/gpsmapper" excludes="**/*.java"/>
        <!-- this list may contain a custom "webapp.conf" file -->
    </copy>

    <!-- copy other config files -->
    <copy todir="${build.gpsmapper}/WEB-INF" verbose="false">
        <fileset dir="${basedir}">
            <include name="private.dtd"/>
            <include name="private*.xml"/>
        </fileset>
    </copy>

    <!-- copy private config files -->
    <copy todir="${build.gpsmapper}/WEB-INF" failonerror="false" verbose="false">
        <fileset dir="${basedir}/private">
            <include name="private*.xml"/>
        </fileset>
    </copy>

    <!-- copy "clients/gts/private" files (may not be present) -->
    <copy todir="${build.gpsmapper}/WEB-INF" failonerror="false" verbose="false">
        <fileset dir="${basedir}/clients/gts/private">
            <include name="private_common.xml"/>
        </fileset>
    </copy>

  </target>

  <!-- Target: gpsmapper.war -->
  <target name="gpsmapper.war" depends=""
    description="Create 'gpsmapper.war' archive">
    <echo message="Creating 'gpsmapper.war' archive ..."/>
    <delete file="${build.home}/gpsmapper.war"/>

    <!-- create gpsmapper.war file -->
    <war warfile="${build.home}/gpsmapper.war" webxml="${build.gpsmapper}/WEB-INF/web.xml">
        <classes dir="${build.gpsmapper}/WEB-INF/classes">
            <include name="org/opengts/war/gpsmapper/**/*"/>
        </classes>
        <lib dir="${build.lib}">
            <include name="gtsutils.jar"/>
            <include name="gtsdb.jar"/>
            <include name="wartools.jar"/>
            <include name="optdb.jar"/>
            <include name="ruledb.jar"/>
            <include name="bcrossdb.jar"/>
            <include name="custom.jar"/>
        </lib>
        <fileset dir="${build.gpsmapper}">
            <include name="**/*"/>
            <exclude name="WEB-INF/web.xml"/>
            <exclude name="WEB-INF/classes/**/*"/>
            <exclude name="WEB-INF/lib/**/*"/>
        </fileset>
    </war>

  </target>

  <!-- Target: gpsmapper.deploy -->
  <target name="gpsmapper.deploy" depends="gpsmapper.war" 
    description="Deploy 'gpsmapper.war' to Tomcat">
    <echo message="Deploying 'gpsmapper.war' to ${catalina.base}/webapps/${gpsmapper.deployWar}"/>
    <copy 
        file="${build.home}/gpsmapper.war" 
        tofile="${catalina.base}/webapps/${gpsmapper.deployWar}"
        overwrite="true" 
        failonerror="true" 
        verbose="true"
        />
    <echo message="Deployed ${catalina.base}/webapps/${gpsmapper.deployWar}"/>
  </target>

  <!-- ======================================================================== -->
  <!-- ======================================================================== -->

  <!-- Target: Device Parser Module example template -->
  <target name="template" depends="prepare,gtsdb" 
    description="Create 'Device Communication Server' template ...">
    <echo message="template ..."/>

    <!-- compile template -->
    <javac srcdir="${src.gts}"
        includeAntRuntime="false"
        source="${compiler.source}"
        target="${compiler.target}"
        destdir="${build.home}"
        debug="${compile.debug}"
        nowarn="${compile.nowarn}"
        deprecation="${compile.deprecation}"
        optimize="${compile.optimize}">
        <compilerarg compiler="${compiler.compiler}" value="${compile.Xlint}"/>
        <classpath refid="compile.classpath"/>
        <include name="org/opengts/servers/*.java"/>
        <include name="org/opengts/servers/template/**/*.java"/>
    </javac>

    <!-- create template.jar server -->
    <jar jarfile="${build.lib}/template.jar">
        <manifest>
            <attribute name="Class-Path" value="${Server_Jar_Classpath}"/>
            <attribute name="Main-Class" value="org.opengts.servers.template.Main"/>
        </manifest>
        <fileset dir="${build.home}">
            <include name="org/opengts/servers/*.class"/>
            <include name="org/opengts/servers/template/**/*.class"/>
        </fileset>
    </jar>

  </target>

  <!-- ======================================================================== -->
  <!-- ======================================================================== -->

  <!-- Target: [OLD] Device Parser Module example template -->
  <target name="template_old" depends="prepare,gtsdb" 
    description="Create [OLD] 'Device Communication Server' template_old ...">
    <echo message="template_old ..."/>

    <!-- compile template_old -->
    <javac srcdir="${src.gts}"
        includeAntRuntime="false"
        source="${compiler.source}"
        target="${compiler.target}"
        destdir="${build.home}"
        debug="${compile.debug}"
        nowarn="${compile.nowarn}"
        deprecation="${compile.deprecation}"
        optimize="${compile.optimize}">
        <compilerarg compiler="${compiler.compiler}" value="${compile.Xlint}"/>
        <classpath refid="compile.classpath"/>
        <include name="org/opengts/servers/template_old/**/*.java"/>
    </javac>

    <!-- create template_old.jar server -->
    <jar jarfile="${build.lib}/template_old.jar">
        <manifest>
            <attribute name="Class-Path" value="${Server_Jar_Classpath}"/>
            <attribute name="Main-Class" value="org.opengts.servers.template_old.Main"/>
        </manifest>
        <fileset dir="${build.home}">
            <include name="org/opengts/servers/template_old/**/*.class"/>
        </fileset>
    </jar>

  </target>

  <!-- ======================================================================== -->
  <!-- ======================================================================== -->

  <!-- Target: Device Parser Module I-CARE G3300 -->
  <target name="icare" depends="prepare,gtsdb" 
    description="Create 'Device Communication Server' I-CARE G3300 ...">
    <echo message="I-Care G3300 server 'icare.jar' ..."/>

    <!-- compile -->
    <javac srcdir="${src.gts}"
        includeAntRuntime="false"
        source="${compiler.source}"
        target="${compiler.target}"
        destdir="${build.home}"
        debug="${compile.debug}"
        nowarn="${compile.nowarn}"
        deprecation="${compile.deprecation}"
        optimize="${compile.optimize}">
        <compilerarg compiler="${compiler.compiler}" value="${compile.Xlint}"/>
        <classpath refid="compile.classpath"/>
        <include name="org/opengts/servers/*.java"/>
        <include name="org/opengts/servers/icare/**/*.java"/>
    </javac>

    <!-- create jar -->
    <jar jarfile="${build.lib}/icare.jar">
        <manifest>
            <attribute name="Class-Path" value="${Server_Jar_Classpath}"/>
            <attribute name="Main-Class" value="org.opengts.servers.icare.Main"/>
        </manifest>
        <fileset dir="${build.home}">
            <include name="org/opengts/servers/*.class"/>
            <include name="org/opengts/servers/icare/**/*.class"/>
        </fileset>
    </jar>

  </target>

  <!-- ======================================================================== -->
  <!-- ======================================================================== -->

  <!-- Target: Device Parser Module Aspicore -->
  <target name="aspicore" depends="prepare,gtsdb" 
    description="Create 'Device Communication Server' Aspicore ...">
    <echo message="Aspicore 'aspicore.jar' ..."/>

    <!-- compile -->
    <javac srcdir="${src.gts}"
        includeAntRuntime="false"
        source="${compiler.source}"
        target="${compiler.target}"
        destdir="${build.home}"
        debug="${compile.debug}"
        nowarn="${compile.nowarn}"
        deprecation="${compile.deprecation}"
        optimize="${compile.optimize}">
        <compilerarg compiler="${compiler.compiler}" value="${compile.Xlint}"/>
        <classpath refid="compile.classpath"/>
        <include name="org/opengts/servers/*.java"/>
        <include name="org/opengts/servers/aspicore/**/*.java"/>
    </javac>

    <!-- create jar -->
    <jar jarfile="${build.lib}/aspicore.jar">
        <manifest>
            <attribute name="Class-Path" value="${Server_Jar_Classpath}"/>
            <attribute name="Main-Class" value="org.opengts.servers.aspicore.Main"/>
        </manifest>
        <fileset dir="${build.home}">
            <include name="org/opengts/servers/*.class"/>
            <include name="org/opengts/servers/aspicore/**/*.class"/>
        </fileset>
    </jar>

  </target>

  <!-- ======================================================================== -->
  <!-- ======================================================================== -->

  <!-- Target: Device Parser Module TK102/TK103 -->
  <target name="tk10x" depends="prepare,gtsdb" 
    description="Create TK102/TK103 DCS ...">
    <echo message="TK102/TK103 'tk10x.jar' ..."/>

    <!-- compile -->
    <javac srcdir="${src.gts}"
        includeAntRuntime="false"
        source="${compiler.source}"
        target="${compiler.target}"
        destdir="${build.home}"
        debug="${compile.debug}"
        nowarn="${compile.nowarn}"
        deprecation="${compile.deprecation}"
        optimize="${compile.optimize}">
        <compilerarg compiler="${compiler.compiler}" value="${compile.Xlint}"/>
        <classpath refid="compile.classpath"/>
        <include name="org/opengts/servers/*.java"/>
        <include name="org/opengts/servers/tk10x/**/*.java"/>
    </javac>

    <!-- create jar -->
    <jar jarfile="${build.lib}/tk10x.jar">
        <manifest>
            <attribute name="Class-Path" value="${Server_Jar_Classpath}"/>
            <attribute name="Main-Class" value="org.opengts.servers.tk10x.Main"/>
        </manifest>
        <fileset dir="${build.home}">
            <include name="org/opengts/servers/*.class"/>
            <include name="org/opengts/servers/tk10x/**/*.class"/>
        </fileset>
    </jar>

  </target>

  <!-- ======================================================================== -->
  <!-- ======================================================================== -->

  <!-- Target: Device Parser Module SipGear -->
  <target name="sipgear" depends="prepare,gtsdb" 
    description="Create 'Device Communication Server' SipGear ...">
    <echo message="SipGear 'sipgear.jar' ..."/>

    <!-- compile -->
    <javac srcdir="${src.gts}"
        includeAntRuntime="false"
        source="${compiler.source}"
        target="${compiler.target}"
        destdir="${build.home}"
        debug="${compile.debug}"
        nowarn="${compile.nowarn}"
        deprecation="${compile.deprecation}"
        optimize="${compile.optimize}">
        <compilerarg compiler="${compiler.compiler}" value="${compile.Xlint}"/>
        <classpath refid="compile.classpath"/>
        <include name="org/opengts/servers/*.java"/>
        <include name="org/opengts/servers/sipgear/**/*.java"/>
    </javac>

    <!-- create jar -->
    <jar jarfile="${build.lib}/sipgear.jar">
        <manifest>
            <attribute name="Class-Path" value="${Server_Jar_Classpath}"/>
            <attribute name="Main-Class" value="org.opengts.servers.sipgear.Main"/>
        </manifest>
        <fileset dir="${build.home}">
            <include name="org/opengts/servers/*.class"/>
            <include name="org/opengts/servers/sipgear/**/*.class"/>
        </fileset>
    </jar>

  </target>

  <!-- ======================================================================== -->
  <!-- ======================================================================== -->

  <!-- Target: Trimble ASCII Interface Protocol -->
  <target name="taip" depends="prepare,gtsdb" 
    description="Create 'Device Communication Server' TAIP ...">
    <echo message="TAIP server 'taip.jar' ..."/>

    <!-- compile -->
    <javac srcdir="${src.gts}"
        includeAntRuntime="false"
        source="${compiler.source}"
        target="${compiler.target}"
        destdir="${build.home}"
        debug="${compile.debug}"
        nowarn="${compile.nowarn}"
        deprecation="${compile.deprecation}"
        optimize="${compile.optimize}">
        <compilerarg compiler="${compiler.compiler}" value="${compile.Xlint}"/>
        <classpath refid="compile.classpath"/>
        <include name="org/opengts/servers/*.java"/>
        <include name="org/opengts/servers/taip/**/*.java"/>
    </javac>

    <!-- create jar -->
    <jar jarfile="${build.lib}/taip.jar">
        <manifest>
            <attribute name="Class-Path" value="${Server_Jar_Classpath}"/>
            <attribute name="Main-Class" value="org.opengts.servers.taip.Main"/>
        </manifest>
        <fileset dir="${build.home}">
            <include name="org/opengts/servers/*.class"/>
            <include name="org/opengts/servers/taip/**/*.class"/>
        </fileset>
    </jar>
    
  </target>

  <!-- ======================================================================== -->
  <!-- ======================================================================== -->

  <!-- Target: Lantrix T1800/T2000 Protocol -->
  <target name="lantrix" depends="prepare,gtsdb" 
    description="Create Lantrix T1800/T2000 DCS ...">
    <echo message="Lantrix T1800/T2000 DCS 'lantrix.jar' ..."/>

    <!-- compile -->
    <javac srcdir="${src.gts}"
        includeAntRuntime="false"
        source="${compiler.source}"
        target="${compiler.target}"
        destdir="${build.home}"
        debug="${compile.debug}"
        nowarn="${compile.nowarn}"
        deprecation="${compile.deprecation}"
        optimize="${compile.optimize}">
        <compilerarg compiler="${compiler.compiler}" value="${compile.Xlint}"/>
        <classpath refid="compile.classpath"/>
        <include name="org/opengts/servers/*.java"/>
        <include name="org/opengts/servers/lantrix/**/*.java"/>
    </javac>

    <!-- create jar -->
    <jar jarfile="${build.lib}/lantrix.jar">
        <manifest>
            <attribute name="Class-Path" value="${Server_Jar_Classpath}"/>
            <attribute name="Main-Class" value="org.opengts.servers.lantrix.Main"/>
        </manifest>
        <fileset dir="${build.home}">
            <include name="org/opengts/servers/*.class"/>
            <include name="org/opengts/servers/lantrix/**/*.class"/>
        </fileset>
    </jar>
    
  </target>

  <!-- ======================================================================== -->
  <!-- ======================================================================== -->

  <!-- Target: Astra Telematics Protocols -->
  <target name="astra" depends="prepare,gtsdb" 
    description="Create Astra Telematics DCS ...">
    <echo message="Astra Telematics DCS 'astra.jar' ..."/>

    <!-- compile -->
    <javac srcdir="${src.gts}"
        includeAntRuntime="false"
        source="${compiler.source}"
        target="${compiler.target}"
        destdir="${build.home}"
        debug="${compile.debug}"
        nowarn="${compile.nowarn}"
        deprecation="${compile.deprecation}"
        optimize="${compile.optimize}">
        <compilerarg compiler="${compiler.compiler}" value="${compile.Xlint}"/>
        <classpath refid="compile.classpath"/>
        <include name="org/opengts/servers/*.java"/>
        <include name="org/opengts/servers/astra/**/*.java"/>
    </javac>

    <!-- create jar -->
    <jar jarfile="${build.lib}/astra.jar">
        <manifest>
            <attribute name="Class-Path" value="${Server_Jar_Classpath}"/>
            <attribute name="Main-Class" value="org.opengts.servers.astra.Main"/>
        </manifest>
        <fileset dir="${build.home}">
            <include name="org/opengts/servers/*.class"/>
            <include name="org/opengts/servers/astra/**/*.class"/>
        </fileset>
    </jar>
    
  </target>

  <!-- ======================================================================== -->
  <!-- ======================================================================== -->

  <!-- Target: miscellaneous tools -->
  <target name="tools" depends="prepare,gtsdb,tomcat.env" 
    description="Create Miscellaneous tools ...">
    <echo message="Tools ..."/>

    <!-- compile tools -->
    <javac srcdir="${src.gts}"
        includeAntRuntime="false"
        source="${compiler.source}"
        target="${compiler.target}"
        destdir="${build.home}"
        debug="${compile.debug}"
        nowarn="${compile.nowarn}"
        deprecation="${compile.deprecation}"
        optimize="${compile.optimize}">
        <compilerarg compiler="${compiler.compiler}" value="${compile.Xlint}"/>
        <classpath refid="compile.war.classpath"/>
        <include name="org/opengts/tools/**/*.java"/>
    </javac>

    <!-- copy Locale properties -->
    <copy todir="${build.home}" verbose="false">
        <fileset dir="${src.gts}">
            <include name="org/opengts/tools/**/*.properties"/>
        </fileset>
    </copy>

    <!-- create tools.jar file -->
    <jar jarfile="${build.lib}/tools.jar">
        <manifest>
            <attribute name="Class-Path" value="${Server_Jar_Classpath} dmtpserv.jar opttrack.jar wartools.jar warmaps.jar"/>
            <attribute name="Main-Class" value="org.opengts.tools.CheckInstall"/>
        </manifest>
        <fileset dir="${build.home}">
            <!-- class files -->
            <include name="org/opengts/tools/**/*.class"/>
            <!-- property files -->
            <include name="org/opengts/tools/**/*.properties"/>
        </fileset>
    </jar>

  </target>

  <!-- ======================================================================== -->

  <!-- Target: systemProps -->
  <target name="systemProps" depends="prepare" 
    description="Print System Properties">
    <echo message="Print System Properties ... "/>

    <!-- compile -->
    <javac srcdir="${src.gts}"
        includeAntRuntime="false"
        source="${compiler.source}"
        target="${compiler.target}"
        destdir="${build.home}"
        debug="${compile.debug}"
        nowarn="${compile.nowarn}"
        deprecation="${compile.deprecation}"
        optimize="${compile.optimize}">
        <!-- the utils dir has known unchecked warnings (ie. anything with "newInstance" etc) -->
        <compilerarg compiler="${compiler.compiler}" value="-Xlint:all,-serial,-path"/>
        <classpath refid="compile.classpath"/>
        <include name="org/opengts/tools/PrintProperties.java"/>
    </javac>
    
    <java classname="org.opengts.tools.PrintProperties" fork="false">
        <classpath refid="compile.classpath"/>
    </java>

  </target>

  <!-- ======================================================================== -->

  <!-- Target: javadocs -->
  
  <target name="javadocs"
    description="Create Javadocs ...">
    <echo message="Create Javadocs ..."/>
  
    <!-- clean old javadocs -->
    <delete dir="${basedir}/javadocs"/>
    <mkdir dir="${basedir}/javadocs"/>

    <!-- create javadocs -->
    <javadoc 
        destdir="${basedir}/javadocs/"
        classpathref="compile.war.classpath"
        maxmemory="1024m">
        <!-- linksource="yes" -->
        <fileset dir="${basedir}/src/org/opengts">
            <include name="*.java"/>
            <exclude name="CompileTime.java"/>
            </fileset>
        <fileset dir="${basedir}/src/org/opengts/util"      includes="**/*.java" />
        <fileset dir="${basedir}/src/org/opengts/dbtools"   includes="**/*.java" />
        <fileset dir="${basedir}/src/org/opengts/dbtypes"   includes="**/*.java" />
        <fileset dir="${basedir}/src/org/opengts/db"        includes="**/*.java" />
        <fileset dir="${basedir}/src/org/opengts/geocoder"  includes="**/*.java" />
        <fileset dir="${basedir}/src/org/opengts/servers"   includes="**/*.java" />
        <fileset dir="${basedir}/src/org/opengts/tools"     includes="**/*.java" />
        <fileset dir="${basedir}/src/org/opengts/war"       includes="**/*.java" />
        <fileset dir="${basedir}/src/org/opengts/extra">
            <include name="**/*.java"/>
            <include name="package-info.java"/>
            <exclude name="war/track/page/WorkOrderInfo.java"/>
            <exclude name="war/track/page/WorkZoneInfo.java"/>
            <exclude name="geocoder/geoinverso/*.java"/>
            <exclude name="geocoder/nacgeo/*.java"/>
            <exclude name="geocoder/mappoint/*.java"/>
            <exclude name="tables/WorkOrder*.java"/>
            <exclude name="tables/WorkZone*.java"/>
            <exclude name="cellid/locaid/GCIDService.java"/>
            </fileset>
        <fileset dir="${basedir}/src/org/opengts/rule">
            <include name="package-info.java"/>
            <include name="RuleListener.java"/>
            <include name="tables/Rule.java"/>
            </fileset>
    </javadoc>

  </target>

  <!-- ======================================================================== -->

  <!-- Target: locale -->
  <target name="locale" 
    description="Copy LocalStrings files to ${build.locale} ...">
    
    <delete dir="${build.locale}"/>
    <mkdir dir="${build.locale}"/>
    
    <copy todir="${build.locale}" verbose="false">
        <fileset dir="${src.gts}">
           <include name="**/LocalStrings_*.properties"/>
        </fileset>
    </copy>

    <!--
    <move todir="${build.locale}">
        <fileset dir="${build.locale}">
           <include name="**/LocalStrings_en*.properties"/>
        </fileset>
        <mapper type="regexp" from="^(.*)(_en)(.*)" to="\1_XX\3"/>
    </move>
    -->
    
    <!-- delete temporary directories (may not be present) -->
    <delete dir="${build.locale}/org/opengts/custom"/>
    <delete dir="${build.locale}/org/opengts/opt"/>
    <delete dir="${build.locale}/org/opengts/rule"/>

  </target>

  <!-- Target: locale.old -->
  <target name="locale.old" 
    description="Copy Old LocalStrings files to ${build.locale}.old ...">
    
    <delete dir="${build.locale}.old"/>
    <mkdir dir="${build.locale}.old"/>
    
    <copy todir="${build.locale}.old" verbose="false">
        <fileset dir="${src.gts}">
           <include name="**/LocalStrings_*.properties.old"/>
        </fileset>
    </copy>

  </target>

  <!-- ======================================================================== -->

  <!-- Target: epoch -->
  <target name="epoch"  depends="gtsutils" 
    description="Display Epoch time ...">
    <java classname="org.opengts.util.DateTime">
        <arg value="-now_sec"/>
        <classpath>
            <pathelement location="${build.lib}/gtsutils.jar"/>
        </classpath>
    </java>
  </target>

  <!-- ======================================================================== -->
  <!-- ======================================================================== -->
  <!-- Custom build scripts -->
  <import file="build_custom.xml"       optional="false"/>  <!-- required -->
  <!-- ======================================================================== -->

  <!-- ======================================================================== -->
  <!-- optional GTSE build scripts -->
  <import file="ant/build_rulewar.xml"      optional="true"/>
  <import file="ant/build_sanav.xml"        optional="true"/>
  <import file="ant/build_t880x.xml"        optional="true"/>
  <!-- ======================================================================== -->

  <!-- ======================================================================== -->
  <!-- private build scripts (not included in release) -->
  <import file="ant/build_rule.xml"         optional="true"/>
  <import file="ant/build_servers.xml"      optional="true"/>
  <import file="ant/build_generic.xml"      optional="true"/>
  <import file="ant/build_celltrac.xml"     optional="true"/>
  <import file="ant/build_ctrac.xml"        optional="true"/>
  <import file="ant/build_intellitrac.xml"  optional="true"/>
  <import file="ant/build_gsspot.xml"       optional="true"/>
  <import file="ant/build_axonn.xml"        optional="true"/>
  <import file="ant/build_fa888.xml"        optional="true"/>
  <import file="ant/build_geoforce.xml"     optional="true"/>
  <import file="ant/build_delorme.xml"      optional="true"/>
  <import file="ant/build_squarell.xml"     optional="true"/>
  <import file="ant/build_dnap.xml"         optional="true"/>
  <import file="ant/build_optui.xml"        optional="true"/>
  <import file="ant/build_bcross.xml"       optional="true"/>
  <import file="ant/build_paratel.xml"      optional="true"/>
  <import file="ant/build_torque.xml"       optional="true"/>
  <import file="ant/build_proxyrg.xml"      optional="true"/>
  <import file="ant/build_aemp.xml"         optional="true"/>
  <import file="ant/build_opt.xml"          optional="true"/>
  <import file="ant/build_private.xml"      optional="true"/>
  <import file="ant/build_qgt500.xml"       optional="true"/>
  <!-- ======================================================================== -->

  <!-- Target: optional jars -->
  <target name="optjars" if="exists.optional" description="Building optional jars (if available)">
    <antcall target="rulefactory.jars"     inheritAll="true" inheritRefs="true"/>
    <antcall target="bordercrossing.jars"  inheritAll="true" inheritRefs="true"/>
    <antcall target="optional.jars"        inheritAll="true" inheritRefs="true"/>
  </target>

  <!-- Target: private download -->
  <!--
  <target name="privDownload" if="exists.download" description="Building private targets (if available)">
    <antcall target="download" inheritAll="true" inheritRefs="true"/>
  </target>
  -->

  <!-- ======================================================================== -->

    <target depends="-pre-init,-init-private,-init-libraries,-init-user" name="-init-project">
        <property file="nbproject/project.properties"/>
    </target>
    <target depends="-pre-init,-init-private,-init-user,-init-project,-init-macrodef-property" if="dist.ear.dir" name="-do-ear-init"/>
    <target depends="-pre-init,-init-private,-init-libraries,-init-user,-init-project,-init-macrodef-property" name="-do-init">
        <condition property="have.tests">
            <or>
                <available file="${test.src.dir}"/>
            </or>
        </condition>
        <condition property="have.sources">
            <or>
                <available file="${src.dir}"/>
            </or>
        </condition>
        <condition property="netbeans.home+have.tests">
            <and>
                <isset property="netbeans.home"/>
                <isset property="have.tests"/>
            </and>
        </condition>
        <condition property="no.javadoc.preview">
            <isfalse value="${javadoc.preview}"/>
        </condition>
        <property name="javac.compilerargs" value=""/>
        <condition property="no.deps">
            <and>
                <istrue value="${no.dependencies}"/>
            </and>
        </condition>
        <condition property="no.dist.ear.dir">
            <not>
                <isset property="dist.ear.dir"/>
            </not>
        </condition>
        <property name="build.web.excludes" value="${build.classes.excludes}"/>
        <condition property="do.compile.jsps">
            <istrue value="${compile.jsps}"/>
        </condition>
        <condition property="do.debug.server">
            <or>
                <not>
                    <isset property="debug.server"/>
                </not>
                <istrue value="${debug.server}"/>
                <and>
                    <not>
                        <istrue value="${debug.server}"/>
                    </not>
                    <not>
                        <istrue value="${debug.client}"/>
                    </not>
                </and>
            </or>
        </condition>
        <condition property="do.debug.client">
            <istrue value="${debug.client}"/>
        </condition>
        <condition property="do.display.browser">
            <istrue value="${display.browser}"/>
        </condition>
        <condition property="do.display.browser.debug.old">
            <and>
                <isset property="do.display.browser"/>
                <not>
                    <isset property="do.debug.client"/>
                </not>
                <not>
                    <isset property="browser.context"/>
                </not>
            </and>
        </condition>
        <condition property="do.display.browser.debug">
            <and>
                <isset property="do.display.browser"/>
                <not>
                    <isset property="do.debug.client"/>
                </not>
                <isset property="browser.context"/>
            </and>
        </condition>
        <available file="${conf.dir}/MANIFEST.MF" property="has.custom.manifest"/>
        <available file="${persistence.xml.dir}/persistence.xml" property="has.persistence.xml"/>
        <condition property="do.war.package.with.custom.manifest">
            <isset property="has.custom.manifest"/>
        </condition>
        <condition property="do.war.package.without.custom.manifest">
            <not>
                <isset property="has.custom.manifest"/>
            </not>
        </condition>
        <condition property="do.tmp.war.package.with.custom.manifest">
            <and>
                <isset property="has.custom.manifest"/>
                <or>
                    <isfalse value="${directory.deployment.supported}"/>
                    <isset property="dist.ear.dir"/>
                </or>
            </and>
        </condition>
        <condition property="do.tmp.war.package.without.custom.manifest">
            <and>
                <not>
                    <isset property="has.custom.manifest"/>
                </not>
                <or>
                    <isfalse value="${directory.deployment.supported}"/>
                    <isset property="dist.ear.dir"/>
                </or>
            </and>
        </condition>
        <condition property="do.tmp.war.package">
            <or>
                <isfalse value="${directory.deployment.supported}"/>
                <isset property="dist.ear.dir"/>
            </or>
        </condition>
        <property name="build.meta.inf.dir" value="${build.web.dir}/META-INF"/>
        <condition else="" property="application.args.param" value="${application.args}">
            <and>
                <isset property="application.args"/>
                <not>
                    <equals arg1="${application.args}" arg2="" trim="true"/>
                </not>
            </and>
        </condition>
        <property name="source.encoding" value="${file.encoding}"/>
        <condition property="javadoc.encoding.used" value="${javadoc.encoding}">
            <and>
                <isset property="javadoc.encoding"/>
                <not>
                    <equals arg1="${javadoc.encoding}" arg2=""/>
                </not>
            </and>
        </condition>
        <property name="javadoc.encoding.used" value="${source.encoding}"/>
        <property name="includes" value="**"/>
        <property name="excludes" value=""/>
        <property name="runmain.jvmargs" value=""/>
        <path id="endorsed.classpath.path" path="${endorsed.classpath}"/>
        <condition else="" property="endorsed.classpath.cmd.line.arg" value="-Xbootclasspath/p:'${toString:endorsed.classpath.path}'">
            <and>
                <isset property="endorsed.classpath"/>
                <length length="0" string="${endorsed.classpath}" when="greater"/>
            </and>
        </condition>
        <condition else="false" property="jdkBug6558476">
            <and>
                <matches pattern="1\.[56]" string="${java.specification.version}"/>
                <not>
                    <os family="unix"/>
                </not>
            </and>
        </condition>
        <property name="javac.fork" value="${jdkBug6558476}"/>
        <condition property="junit.available">
            <or>
                <available classname="org.junit.Test" classpath="${run.test.classpath}"/>
                <available classname="junit.framework.Test" classpath="${run.test.classpath}"/>
            </or>
        </condition>
        <condition property="testng.available">
            <available classname="org.testng.annotations.Test" classpath="${run.test.classpath}"/>
        </condition>
        <condition property="junit+testng.available">
            <and>
                <istrue value="${junit.available}"/>
                <istrue value="${testng.available}"/>
            </and>
        </condition>
        <condition else="testng" property="testng.mode" value="mixed">
            <istrue value="${junit+testng.available}"/>
        </condition>
        <condition else="" property="testng.debug.mode" value="-mixed">
            <istrue value="${junit+testng.available}"/>
        </condition>
    </target>
    <target depends="init" name="-init-cos" unless="deploy.on.save">
        <condition property="deploy.on.save" value="true">
            <or>
                <istrue value="${j2ee.deploy.on.save}"/>
                <istrue value="${j2ee.compile.on.save}"/>
            </or>
        </condition>
    </target>
    <target name="-post-init">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target depends="-pre-init,-init-private,-init-libraries,-init-user,-init-project,-do-init" name="-init-check">
        <fail unless="src.dir">Must set src.dir</fail>
        <fail unless="test.src.dir">Must set test.src.dir</fail>
        <fail unless="build.dir">Must set build.dir</fail>
        <fail unless="build.web.dir">Must set build.web.dir</fail>
        <fail unless="build.generated.dir">Must set build.generated.dir</fail>
        <fail unless="dist.dir">Must set dist.dir</fail>
        <fail unless="build.classes.dir">Must set build.classes.dir</fail>
        <fail unless="dist.javadoc.dir">Must set dist.javadoc.dir</fail>
        <fail unless="build.test.classes.dir">Must set build.test.classes.dir</fail>
        <fail unless="build.test.results.dir">Must set build.test.results.dir</fail>
        <fail unless="build.classes.excludes">Must set build.classes.excludes</fail>
        <fail unless="dist.war">Must set dist.war</fail>
        <condition property="missing.j2ee.server.home">
            <and>
                <matches pattern="j2ee.server.home" string="${j2ee.platform.classpath}"/>
                <not>
                    <isset property="j2ee.server.home"/>
                </not>
            </and>
        </condition>
        <fail if="missing.j2ee.server.home">
The Java EE server classpath is not correctly set up - server home directory is missing.
Either open the project in the IDE and assign the server or setup the server classpath manually.
For example like this:
   ant -Dj2ee.server.home=&lt;app_server_installation_directory&gt;
                </fail>
        <fail unless="j2ee.platform.classpath">
The Java EE server classpath is not correctly set up. Your active server type is ${j2ee.server.type}.
Either open the project in the IDE and assign the server or setup the server classpath manually.
For example like this:
   ant -Duser.properties.file=&lt;path_to_property_file&gt; (where you put the property "j2ee.platform.classpath" in a .properties file)
or ant -Dj2ee.platform.classpath=&lt;server_classpath&gt; (where no properties file is used)
                </fail>
    </target>
    <target name="-init-macrodef-property">
        <macrodef name="property" uri="http://www.netbeans.org/ns/web-project/1">
            <attribute name="name"/>
            <attribute name="value"/>
            <sequential>
                <property name="@{name}" value="${@{value}}"/>
            </sequential>
        </macrodef>
    </target>
    <target depends="-init-ap-cmdline-properties" if="ap.supported.internal" name="-init-macrodef-javac-with-processors">
        <macrodef name="javac" uri="http://www.netbeans.org/ns/web-project/2">
            <attribute default="${src.dir}" name="srcdir"/>
            <attribute default="${build.classes.dir}" name="destdir"/>
            <attribute default="${javac.classpath}:${j2ee.platform.classpath}" name="classpath"/>
            <attribute default="${javac.processorpath}" name="processorpath"/>
            <attribute default="${build.generated.sources.dir}/ap-source-output" name="apgeneratedsrcdir"/>
            <attribute default="${includes}" name="includes"/>
            <attribute default="${excludes}" name="excludes"/>
            <attribute default="${javac.debug}" name="debug"/>
            <attribute default="${empty.dir}" name="gensrcdir"/>
            <element name="customize" optional="true"/>
            <sequential>
                <property location="${build.dir}/empty" name="empty.dir"/>
                <mkdir dir="${empty.dir}"/>
                <mkdir dir="@{apgeneratedsrcdir}"/>
                <javac debug="@{debug}" deprecation="${javac.deprecation}" destdir="@{destdir}" encoding="${source.encoding}" excludes="@{excludes}" fork="${javac.fork}" includeantruntime="false" includes="@{includes}" source="${javac.source}" srcdir="@{srcdir}" target="${javac.target}">
                    <src>
                        <dirset dir="@{gensrcdir}" erroronmissingdir="false">
                            <include name="*"/>
                        </dirset>
                    </src>
                    <classpath>
                        <path path="@{classpath}"/>
                    </classpath>
                    <compilerarg line="${endorsed.classpath.cmd.line.arg}"/>
                    <compilerarg line="${javac.compilerargs}"/>
                    <compilerarg value="-processorpath"/>
                    <compilerarg path="@{processorpath}:${empty.dir}"/>
                    <compilerarg line="${ap.processors.internal}"/>
                    <compilerarg value="-s"/>
                    <compilerarg path="@{apgeneratedsrcdir}"/>
                    <compilerarg line="${ap.proc.none.internal}"/>
                    <customize/>
                </javac>
            </sequential>
        </macrodef>
    </target>
    <target depends="-init-ap-cmdline-properties" name="-init-macrodef-javac-without-processors" unless="ap.supported.internal">
        <macrodef name="javac" uri="http://www.netbeans.org/ns/web-project/2">
            <attribute default="${src.dir}" name="srcdir"/>
            <attribute default="${build.classes.dir}" name="destdir"/>
            <attribute default="${javac.classpath}:${j2ee.platform.classpath}" name="classpath"/>
            <attribute default="${javac.processorpath}" name="processorpath"/>
            <attribute default="${build.generated.sources.dir}/ap-source-output" name="apgeneratedsrcdir"/>
            <attribute default="${includes}" name="includes"/>
            <attribute default="${excludes}" name="excludes"/>
            <attribute default="${javac.debug}" name="debug"/>
            <attribute default="${empty.dir}" name="gensrcdir"/>
            <element name="customize" optional="true"/>
            <sequential>
                <property location="${build.dir}/empty" name="empty.dir"/>
                <mkdir dir="${empty.dir}"/>
                <javac debug="@{debug}" deprecation="${javac.deprecation}" destdir="@{destdir}" encoding="${source.encoding}" excludes="@{excludes}" includeantruntime="false" includes="@{includes}" source="${javac.source}" srcdir="@{srcdir}" target="${javac.target}">
                    <src>
                        <dirset dir="@{gensrcdir}" erroronmissingdir="false">
                            <include name="*"/>
                        </dirset>
                    </src>
                    <classpath>
                        <path path="@{classpath}"/>
                    </classpath>
                    <compilerarg line="${endorsed.classpath.cmd.line.arg}"/>
                    <compilerarg line="${javac.compilerargs}"/>
                    <customize/>
                </javac>
            </sequential>
        </macrodef>
    </target>
    <target depends="-init-macrodef-javac-with-processors,-init-macrodef-javac-without-processors" name="-init-macrodef-javac">
        <macrodef name="depend" uri="http://www.netbeans.org/ns/web-project/2">
            <attribute default="${src.dir}" name="srcdir"/>
            <attribute default="${build.classes.dir}" name="destdir"/>
            <attribute default="${javac.classpath}:${j2ee.platform.classpath}" name="classpath"/>
            <sequential>
                <depend cache="${build.dir}/depcache" destdir="@{destdir}" excludes="${excludes}" includes="${includes}" srcdir="@{srcdir}">
                    <classpath>
                        <path path="@{classpath}"/>
                    </classpath>
                </depend>
            </sequential>
        </macrodef>
        <macrodef name="force-recompile" uri="http://www.netbeans.org/ns/web-project/2">
            <attribute default="${build.classes.dir}" name="destdir"/>
            <sequential>
                <fail unless="javac.includes">Must set javac.includes</fail>
                <pathconvert pathsep="${line.separator}" property="javac.includes.binary">
                    <path>
                        <filelist dir="@{destdir}" files="${javac.includes}"/>
                    </path>
                    <globmapper from="*.java" to="*.class"/>
                </pathconvert>
                <tempfile deleteonexit="true" property="javac.includesfile.binary"/>
                <echo file="${javac.includesfile.binary}" message="${javac.includes.binary}"/>
                <delete>
                    <files includesfile="${javac.includesfile.binary}"/>
                </delete>
                <delete file="${javac.includesfile.binary}"/>
            </sequential>
        </macrodef>
    </target>
    <target if="${junit.available}" name="-init-macrodef-junit-init">
        <condition else="false" property="nb.junit.batch" value="true">
            <and>
                <istrue value="${junit.available}"/>
                <not>
                    <isset property="test.method"/>
                </not>
            </and>
        </condition>
        <condition else="false" property="nb.junit.single" value="true">
            <and>
                <istrue value="${junit.available}"/>
                <isset property="test.method"/>
            </and>
        </condition>
    </target>
    <target name="-init-test-properties">
        <property name="test.binaryincludes" value="&lt;nothing&gt;"/>
        <property name="test.binarytestincludes" value=""/>
        <property name="test.binaryexcludes" value=""/>
    </target>
    <target if="${nb.junit.single}" name="-init-macrodef-junit-single" unless="${nb.junit.batch}">
        <macrodef name="junit" uri="http://www.netbeans.org/ns/web-project/2">
            <attribute default="${includes}" name="includes"/>
            <attribute default="${excludes}" name="excludes"/>
            <attribute default="**" name="testincludes"/>
            <attribute default="" name="testmethods"/>
            <element name="customize" optional="true"/>
            <sequential>
                <junit dir="${basedir}" errorproperty="tests.failed" failureproperty="tests.failed" fork="true" showoutput="true" tempdir="${java.io.tmpdir}">
                    <test methods="@{testmethods}" name="@{testincludes}" todir="${build.test.results.dir}"/>
                    <syspropertyset>
                        <propertyref prefix="test-sys-prop."/>
                        <mapper from="test-sys-prop.*" to="*" type="glob"/>
                    </syspropertyset>
                    <formatter type="brief" usefile="false"/>
                    <formatter type="xml"/>
                    <jvmarg value="-ea"/>
                    <customize/>
                </junit>
            </sequential>
        </macrodef>
    </target>
    <target depends="-init-test-properties" if="${nb.junit.batch}" name="-init-macrodef-junit-batch" unless="${nb.junit.single}">
        <macrodef name="junit" uri="http://www.netbeans.org/ns/web-project/2">
            <attribute default="${includes}" name="includes"/>
            <attribute default="${excludes}" name="excludes"/>
            <attribute default="**" name="testincludes"/>
            <attribute default="" name="testmethods"/>
            <element name="customize" optional="true"/>
            <sequential>
                <property name="run.jvmargs.ide" value=""/>
                <junit dir="${basedir}" errorproperty="tests.failed" failureproperty="tests.failed" fork="true" showoutput="true" tempdir="${build.dir}">
                    <batchtest todir="${build.test.results.dir}">
                        <fileset dir="${test.src.dir}" excludes="@{excludes},${excludes}" includes="@{includes}">
                            <filename name="@{testincludes}"/>
                        </fileset>
                        <fileset dir="${build.test.classes.dir}" excludes="@{excludes},${excludes},${test.binaryexcludes}" includes="${test.binaryincludes}">
                            <filename name="${test.binarytestincludes}"/>
                        </fileset>
                    </batchtest>
                    <syspropertyset>
                        <propertyref prefix="test-sys-prop."/>
                        <mapper from="test-sys-prop.*" to="*" type="glob"/>
                    </syspropertyset>
                    <formatter type="brief" usefile="false"/>
                    <formatter type="xml"/>
                    <jvmarg value="-ea"/>
                    <jvmarg line="${run.jvmargs.ide}"/>
                    <customize/>
                </junit>
            </sequential>
        </macrodef>
    </target>
    <target depends="-init-macrodef-junit-init,-init-macrodef-junit-single, -init-macrodef-junit-batch" if="${junit.available}" name="-init-macrodef-junit"/>
    <target if="${testng.available}" name="-init-macrodef-testng">
        <macrodef name="testng" uri="http://www.netbeans.org/ns/web-project/2">
            <attribute default="${includes}" name="includes"/>
            <attribute default="${excludes}" name="excludes"/>
            <attribute default="**" name="testincludes"/>
            <attribute default="" name="testmethods"/>
            <element name="customize" optional="true"/>
            <sequential>
                <condition else="" property="testng.methods.arg" value="@{testincludes}.@{testmethods}">
                    <isset property="test.method"/>
                </condition>
                <union id="test.set">
                    <fileset dir="${test.src.dir}" excludes="@{excludes},**/*.xml,${excludes}" includes="@{includes}">
                        <filename name="@{testincludes}"/>
                    </fileset>
                </union>
                <taskdef classname="org.testng.TestNGAntTask" classpath="${run.test.classpath}" name="testng"/>
                <testng classfilesetref="test.set" failureProperty="tests.failed" listeners="org.testng.reporters.VerboseReporter" methods="${testng.methods.arg}" mode="${testng.mode}" outputdir="${build.test.results.dir}" suitename="ClickForTechSupport" testname="TestNG tests" workingDir="${basedir}">
                    <xmlfileset dir="${build.test.classes.dir}" includes="@{testincludes}"/>
                    <propertyset>
                        <propertyref prefix="test-sys-prop."/>
                        <mapper from="test-sys-prop.*" to="*" type="glob"/>
                    </propertyset>
                    <customize/>
                </testng>
            </sequential>
        </macrodef>
    </target>
    <target name="-init-macrodef-test-impl">
        <macrodef name="test-impl" uri="http://www.netbeans.org/ns/web-project/2">
            <attribute default="${includes}" name="includes"/>
            <attribute default="${excludes}" name="excludes"/>
            <attribute default="**" name="testincludes"/>
            <attribute default="" name="testmethods"/>
            <element implicit="true" name="customize" optional="true"/>
            <sequential>
                <echo>No tests executed.</echo>
            </sequential>
        </macrodef>
    </target>
    <target depends="-init-macrodef-junit" if="${junit.available}" name="-init-macrodef-junit-impl">
        <macrodef name="test-impl" uri="http://www.netbeans.org/ns/web-project/2">
            <attribute default="${includes}" name="includes"/>
            <attribute default="${excludes}" name="excludes"/>
            <attribute default="**" name="testincludes"/>
            <attribute default="" name="testmethods"/>
            <element implicit="true" name="customize" optional="true"/>
            <sequential>
                <webproject2:junit excludes="@{excludes}" includes="@{includes}" testincludes="@{testincludes}" testmethods="@{testmethods}">
                    <customize/>
                </webproject2:junit>
            </sequential>
        </macrodef>
    </target>
    <target depends="-init-macrodef-testng" if="${testng.available}" name="-init-macrodef-testng-impl">
        <macrodef name="test-impl" uri="http://www.netbeans.org/ns/web-project/2">
            <attribute default="${includes}" name="includes"/>
            <attribute default="${excludes}" name="excludes"/>
            <attribute default="**" name="testincludes"/>
            <attribute default="" name="testmethods"/>
            <element implicit="true" name="customize" optional="true"/>
            <sequential>
                <webproject2:testng excludes="@{excludes}" includes="@{includes}" testincludes="@{testincludes}" testmethods="@{testmethods}">
                    <customize/>
                </webproject2:testng>
            </sequential>
        </macrodef>
    </target>
    <target depends="-init-macrodef-test-impl,-init-macrodef-junit-impl,-init-macrodef-testng-impl" name="-init-macrodef-test">
        <macrodef name="test" uri="http://www.netbeans.org/ns/web-project/2">
            <attribute default="${includes}" name="includes"/>
            <attribute default="${excludes}" name="excludes"/>
            <attribute default="**" name="testincludes"/>
            <attribute default="" name="testmethods"/>
            <sequential>
                <webproject2:test-impl excludes="@{excludes}" includes="@{includes}" testincludes="@{testincludes}" testmethods="@{testmethods}">
                    <customize>
                        <classpath>
                            <path path="${run.test.classpath}:${j2ee.platform.classpath}:${j2ee.platform.embeddableejb.classpath}"/>
                        </classpath>
                        <jvmarg line="${endorsed.classpath.cmd.line.arg}"/>
                        <jvmarg line="${runmain.jvmargs}"/>
                    </customize>
                </webproject2:test-impl>
            </sequential>
        </macrodef>
    </target>
    <target if="${junit.available}" name="-init-macrodef-junit-debug" unless="${nb.junit.batch}">
        <macrodef name="junit-debug" uri="http://www.netbeans.org/ns/web-project/2">
            <attribute default="${includes}" name="includes"/>
            <attribute default="${excludes}" name="excludes"/>
            <attribute default="**" name="testincludes"/>
            <attribute default="" name="testmethods"/>
            <element name="customize" optional="true"/>
            <sequential>
                <junit dir="${basedir}" errorproperty="tests.failed" failureproperty="tests.failed" fork="true" showoutput="true" tempdir="${java.io.tmpdir}">
                    <test methods="@{testmethods}" name="@{testincludes}" todir="${build.test.results.dir}"/>
                    <syspropertyset>
                        <propertyref prefix="test-sys-prop."/>
                        <mapper from="test-sys-prop.*" to="*" type="glob"/>
                    </syspropertyset>
                    <formatter type="brief" usefile="false"/>
                    <formatter type="xml"/>
                    <jvmarg value="-ea"/>
                    <jvmarg line="${debug-args-line}"/>
                    <jvmarg value="-Xrunjdwp:transport=${debug-transport},address=${jpda.address}"/>
                    <customize/>
                </junit>
            </sequential>
        </macrodef>
    </target>
    <target depends="-init-test-properties" if="${nb.junit.batch}" name="-init-macrodef-junit-debug-batch">
        <macrodef name="junit-debug" uri="http://www.netbeans.org/ns/web-project/2">
            <attribute default="${includes}" name="includes"/>
            <attribute default="${excludes}" name="excludes"/>
            <attribute default="**" name="testincludes"/>
            <attribute default="" name="testmethods"/>
            <element name="customize" optional="true"/>
            <sequential>
                <property name="run.jvmargs.ide" value=""/>
                <junit dir="${basedir}" errorproperty="tests.failed" failureproperty="tests.failed" fork="true" showoutput="true" tempdir="${build.dir}">
                    <batchtest todir="${build.test.results.dir}">
                        <fileset dir="${test.src.dir}" excludes="@{excludes},${excludes}" includes="@{includes}">
                            <filename name="@{testincludes}"/>
                        </fileset>
                        <fileset dir="${build.test.classes.dir}" excludes="@{excludes},${excludes},${test.binaryexcludes}" includes="${test.binaryincludes}">
                            <filename name="${test.binarytestincludes}"/>
                        </fileset>
                    </batchtest>
                    <syspropertyset>
                        <propertyref prefix="test-sys-prop."/>
                        <mapper from="test-sys-prop.*" to="*" type="glob"/>
                    </syspropertyset>
                    <formatter type="brief" usefile="false"/>
                    <formatter type="xml"/>
                    <jvmarg value="-ea"/>
                    <jvmarg line="${run.jvmargs.ide}"/>
                    <jvmarg line="${debug-args-line}"/>
                    <jvmarg value="-Xrunjdwp:transport=${debug-transport},address=${jpda.address}"/>
                    <customize/>
                </junit>
            </sequential>
        </macrodef>
    </target>
    <target depends="-init-macrodef-junit-debug,-init-macrodef-junit-debug-batch" if="${junit.available}" name="-init-macrodef-junit-debug-impl">
        <macrodef name="test-debug-impl" uri="http://www.netbeans.org/ns/web-project/2">
            <attribute default="${includes}" name="includes"/>
            <attribute default="${excludes}" name="excludes"/>
            <attribute default="**" name="testincludes"/>
            <attribute default="" name="testmethods"/>
            <element implicit="true" name="customize" optional="true"/>
            <sequential>
                <webproject2:junit-debug excludes="@{excludes}" includes="@{includes}" testincludes="@{testincludes}" testmethods="@{testmethods}">
                    <customize/>
                </webproject2:junit-debug>
            </sequential>
        </macrodef>
    </target>
    <target if="${testng.available}" name="-init-macrodef-testng-debug">
        <macrodef name="testng-debug" uri="http://www.netbeans.org/ns/web-project/2">
            <attribute default="${main.class}" name="testClass"/>
            <attribute default="" name="testMethod"/>
            <element name="customize2" optional="true"/>
            <sequential>
                <condition else="-testclass @{testClass}" property="test.class.or.method" value="-methods @{testClass}.@{testMethod}">
                    <isset property="test.method"/>
                </condition>
                <condition else="-suitename ClickForTechSupport -testname @{testClass} ${test.class.or.method}" property="testng.cmd.args" value="@{testClass}">
                    <matches pattern=".*\.xml" string="@{testClass}"/>
                </condition>
                <delete dir="${build.test.results.dir}" quiet="true"/>
                <mkdir dir="${build.test.results.dir}"/>
                <webproject1:debug args="${testng.cmd.args}" classname="org.testng.TestNG" classpath="${debug.test.classpath}:${j2ee.platform.embeddableejb.classpath}">
                    <customize>
                        <customize2/>
                        <jvmarg value="-ea"/>
                        <arg line="${testng.debug.mode}"/>
                        <arg line="-d ${build.test.results.dir}"/>
                        <arg line="-listener org.testng.reporters.VerboseReporter"/>
                    </customize>
                </webproject1:debug>
            </sequential>
        </macrodef>
    </target>
    <target depends="-init-macrodef-testng-debug" if="${testng.available}" name="-init-macrodef-testng-debug-impl">
        <macrodef name="testng-debug-impl" uri="http://www.netbeans.org/ns/web-project/2">
            <attribute default="${main.class}" name="testClass"/>
            <attribute default="" name="testMethod"/>
            <element implicit="true" name="customize2" optional="true"/>
            <sequential>
                <webproject2:testng-debug testClass="@{testClass}" testMethod="@{testMethod}">
                    <customize2/>
                </webproject2:testng-debug>
            </sequential>
        </macrodef>
    </target>
    <target depends="-init-macrodef-junit-debug-impl" if="${junit.available}" name="-init-macrodef-test-debug-junit">
        <macrodef name="test-debug" uri="http://www.netbeans.org/ns/web-project/2">
            <attribute default="${includes}" name="includes"/>
            <attribute default="${excludes}" name="excludes"/>
            <attribute default="**" name="testincludes"/>
            <attribute default="" name="testmethods"/>
            <attribute default="${main.class}" name="testClass"/>
            <attribute default="" name="testMethod"/>
            <sequential>
                <webproject2:test-debug-impl excludes="@{excludes}" includes="@{includes}" testincludes="@{testincludes}" testmethods="@{testmethods}">
                    <customize>
                        <classpath>
                            <path path="${run.test.classpath}:${j2ee.platform.classpath}:${j2ee.platform.embeddableejb.classpath}"/>
                        </classpath>
                        <jvmarg line="${endorsed.classpath.cmd.line.arg}"/>
                        <jvmarg line="${runmain.jvmargs}"/>
                    </customize>
                </webproject2:test-debug-impl>
            </sequential>
        </macrodef>
    </target>
    <target depends="-init-macrodef-testng-debug-impl" if="${testng.available}" name="-init-macrodef-test-debug-testng">
        <macrodef name="test-debug" uri="http://www.netbeans.org/ns/web-project/2">
            <attribute default="${includes}" name="includes"/>
            <attribute default="${excludes}" name="excludes"/>
            <attribute default="**" name="testincludes"/>
            <attribute default="" name="testmethods"/>
            <attribute default="${main.class}" name="testClass"/>
            <attribute default="" name="testMethod"/>
            <sequential>
                <webproject2:testng-debug-impl testClass="@{testClass}" testMethod="@{testMethod}">
                    <customize2>
                        <syspropertyset>
                            <propertyref prefix="test-sys-prop."/>
                            <mapper from="test-sys-prop.*" to="*" type="glob"/>
                        </syspropertyset>
                    </customize2>
                </webproject2:testng-debug-impl>
            </sequential>
        </macrodef>
    </target>
    <target depends="-init-macrodef-test-debug-junit,-init-macrodef-test-debug-testng" name="-init-macrodef-test-debug"/>
    <target name="-init-macrodef-java">
        <macrodef name="java" uri="http://www.netbeans.org/ns/web-project/1">
            <attribute default="${main.class}" name="classname"/>
            <attribute default="${debug.classpath}" name="classpath"/>
            <element name="customize" optional="true"/>
            <sequential>
                <java classname="@{classname}" fork="true">
                    <jvmarg line="${endorsed.classpath.cmd.line.arg}"/>
                    <jvmarg line="${runmain.jvmargs}"/>
                    <classpath>
                        <path path="@{classpath}:${j2ee.platform.classpath}"/>
                    </classpath>
                    <syspropertyset>
                        <propertyref prefix="run-sys-prop."/>
                        <mapper from="run-sys-prop.*" to="*" type="glob"/>
                    </syspropertyset>
                    <customize/>
                </java>
            </sequential>
        </macrodef>
    </target>
    <target name="-init-macrodef-nbjsdebug">
        <macrodef name="nbjsdebugstart" uri="http://www.netbeans.org/ns/web-project/1">
            <attribute default="${client.url}" name="webUrl"/>
            <sequential>
                <nbjsdebugstart urlPart="${client.urlPart}" webUrl="@{webUrl}"/>
            </sequential>
        </macrodef>
    </target>
    <target depends="-init-debug-args" name="-init-macrodef-nbjpda">
        <macrodef name="nbjpdastart" uri="http://www.netbeans.org/ns/web-project/1">
            <attribute default="${main.class}" name="name"/>
            <attribute default="${debug.classpath}:${j2ee.platform.classpath}" name="classpath"/>
            <sequential>
                <nbjpdastart addressproperty="jpda.address" name="@{name}" transport="${debug-transport}">
                    <classpath>
                        <path path="@{classpath}"/>
                    </classpath>
                </nbjpdastart>
            </sequential>
        </macrodef>
        <macrodef name="nbjpdareload" uri="http://www.netbeans.org/ns/web-project/1">
            <attribute default="${build.classes.dir}" name="dir"/>
            <sequential>
                <nbjpdareload>
                    <fileset dir="@{dir}" includes="${fix.classes}">
                        <include name="${fix.includes}*.class"/>
                    </fileset>
                </nbjpdareload>
            </sequential>
        </macrodef>
        <macrodef name="nbjpdaappreloaded" uri="http://www.netbeans.org/ns/web-project/1">
            <sequential>
                <nbjpdaappreloaded/>
            </sequential>
        </macrodef>
    </target>
    <target name="-init-debug-args">
        <property name="version-output" value="java version &quot;${ant.java.version}"/>
        <condition property="have-jdk-older-than-1.4">
            <or>
                <contains string="${version-output}" substring="java version &quot;1.0"/>
                <contains string="${version-output}" substring="java version &quot;1.1"/>
                <contains string="${version-output}" substring="java version &quot;1.2"/>
                <contains string="${version-output}" substring="java version &quot;1.3"/>
            </or>
        </condition>
        <condition else="-Xdebug" property="debug-args-line" value="-Xdebug -Xnoagent -Djava.compiler=none">
            <istrue value="${have-jdk-older-than-1.4}"/>
        </condition>
        <condition else="dt_socket" property="debug-transport-by-os" value="dt_shmem">
            <os family="windows"/>
        </condition>
        <condition else="${debug-transport-by-os}" property="debug-transport" value="${debug.transport}">
            <isset property="debug.transport"/>
        </condition>
    </target>
    <target depends="-init-debug-args" name="-init-macrodef-debug">
        <macrodef name="debug" uri="http://www.netbeans.org/ns/web-project/1">
            <attribute default="${main.class}" name="classname"/>
            <attribute default="${debug.classpath}:${j2ee.platform.classpath}" name="classpath"/>
            <attribute default="${application.args.param}" name="args"/>
            <element name="customize" optional="true"/>
            <sequential>
                <java classname="@{classname}" fork="true">
                    <jvmarg line="${endorsed.classpath.cmd.line.arg}"/>
                    <jvmarg line="${debug-args-line}"/>
                    <jvmarg value="-Xrunjdwp:transport=${debug-transport},address=${jpda.address}"/>
                    <jvmarg line="${runmain.jvmargs}"/>
                    <classpath>
                        <path path="@{classpath}"/>
                    </classpath>
                    <syspropertyset>
                        <propertyref prefix="run-sys-prop."/>
                        <mapper from="run-sys-prop.*" to="*" type="glob"/>
                    </syspropertyset>
                    <arg line="@{args}"/>
                    <customize/>
                </java>
            </sequential>
        </macrodef>
    </target>
    <target name="-init-taskdefs">
        <fail unless="libs.CopyLibs.classpath">
The libs.CopyLibs.classpath property is not set up.
This property must point to 
org-netbeans-modules-java-j2seproject-copylibstask.jar file which is part
of NetBeans IDE installation and is usually located at 
&lt;netbeans_installation&gt;/java&lt;version&gt;/ant/extra folder.
Either open the project in the IDE and make sure CopyLibs library
exists or setup the property manually. For example like this:
 ant -Dlibs.CopyLibs.classpath=a/path/to/org-netbeans-modules-java-j2seproject-copylibstask.jar
                </fail>
        <taskdef classpath="${libs.CopyLibs.classpath}" resource="org/netbeans/modules/java/j2seproject/copylibstask/antlib.xml"/>
    </target>
    <target name="-init-ap-cmdline-properties">
        <property name="annotation.processing.enabled" value="true"/>
        <property name="annotation.processing.processors.list" value=""/>
        <property name="annotation.processing.run.all.processors" value="true"/>
        <property name="javac.processorpath" value="${javac.classpath}"/>
        <property name="javac.test.processorpath" value="${javac.test.classpath}"/>
        <condition property="ap.supported.internal" value="true">
            <not>
                <matches pattern="1\.[0-5](\..*)?" string="${javac.source}"/>
            </not>
        </condition>
    </target>
    <target depends="-init-ap-cmdline-properties" if="ap.supported.internal" name="-init-ap-cmdline-supported">
        <condition else="" property="ap.processors.internal" value="-processor ${annotation.processing.processors.list}">
            <isfalse value="${annotation.processing.run.all.processors}"/>
        </condition>
        <condition else="" property="ap.proc.none.internal" value="-proc:none">
            <isfalse value="${annotation.processing.enabled}"/>
        </condition>
    </target>
    <target depends="-init-ap-cmdline-properties,-init-ap-cmdline-supported" name="-init-ap-cmdline">
        <property name="ap.cmd.line.internal" value=""/>
    </target>
    <!--
                pre NB7.2 profiling section; consider it deprecated
            -->
    <target depends="-profile-pre-init, init, -profile-post-init, -profile-init-check" if="profiler.info.jvmargs.agent" name="profile-init"/>
    <target if="profiler.info.jvmargs.agent" name="-profile-pre-init">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target if="profiler.info.jvmargs.agent" name="-profile-post-init">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target depends="-profile-pre-init, init, -profile-post-init" if="profiler.info.jvmargs.agent" name="-profile-init-check">
        <fail unless="profiler.info.jvm">Must set JVM to use for profiling in profiler.info.jvm</fail>
        <fail unless="profiler.info.jvmargs.agent">Must set profiler agent JVM arguments in profiler.info.jvmargs.agent</fail>
    </target>
    <!--
                end of pre NB7.2 profiling section
            -->
    <target depends="-pre-init,-init-private,-init-libraries,-init-user,-init-project,-do-init,-post-init,-init-check,-init-macrodef-property,-init-macrodef-javac,-init-macrodef-test,-init-macrodef-test-debug,-init-macrodef-java,-init-macrodef-nbjpda,-init-macrodef-nbjsdebug,-init-macrodef-debug,-init-taskdefs,-init-ap-cmdline" name="init"/>
    <!--
                COMPILATION SECTION
            -->
    <target depends="init" if="no.dist.ear.dir" name="deps-module-jar" unless="no.deps"/>
    <target depends="init" if="dist.ear.dir" name="deps-ear-jar" unless="no.deps"/>
    <target depends="init, deps-module-jar, deps-ear-jar" name="deps-jar" unless="no.deps"/>
    <target depends="init,deps-jar" name="-pre-pre-compile">
        <mkdir dir="${build.classes.dir}"/>
    </target>
    <target name="-pre-compile">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target name="-copy-webdir">
        <copy todir="${build.web.dir}">
            <fileset dir="${web.docbase.dir}" excludes="${build.web.excludes},${excludes}" includes="${includes}"/>
        </copy>
        <copy todir="${build.web.dir}/WEB-INF">
            <fileset dir="${webinf.dir}" excludes="${build.web.excludes}"/>
        </copy>
    </target>
    <target depends="init, deps-jar, -pre-pre-compile, -pre-compile, -copy-manifest, -copy-persistence-xml, -copy-webdir, library-inclusion-in-archive,library-inclusion-in-manifest" if="have.sources" name="-do-compile">
        <webproject2:javac destdir="${build.classes.dir}" gensrcdir="${build.generated.sources.dir}"/>
        <copy todir="${build.classes.dir}">
            <fileset dir="${src.dir}" excludes="${build.classes.excludes},${excludes}" includes="${includes}"/>
        </copy>
    </target>
    <target if="has.custom.manifest" name="-copy-manifest">
        <mkdir dir="${build.meta.inf.dir}"/>
        <copy todir="${build.meta.inf.dir}">
            <fileset dir="${conf.dir}" includes="MANIFEST.MF"/>
        </copy>
    </target>
    <target if="has.persistence.xml" name="-copy-persistence-xml">
        <mkdir dir="${build.web.dir}/WEB-INF/classes/META-INF"/>
        <copy todir="${build.web.dir}/WEB-INF/classes/META-INF">
            <fileset dir="${persistence.xml.dir}" includes="persistence.xml orm.xml"/>
        </copy>
    </target>
    <target name="-post-compile">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target depends="init,deps-jar,-pre-pre-compile,-pre-compile,-do-compile,-post-compile,compile.base,compile.servers,compile.servlets" description="Compile project." name="compile"/>
    <target name="-pre-compile-single">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target depends="init,deps-jar,-pre-pre-compile" name="-do-compile-single">
        <fail unless="javac.includes">Must select some files in the IDE or set javac.includes</fail>
        <webproject2:javac excludes="" gensrcdir="${build.generated.sources.dir}" includes="${javac.includes}"/>
        <copy todir="${build.classes.dir}">
            <fileset dir="${src.dir}" excludes="${build.classes.excludes},${excludes}" includes="${includes}"/>
        </copy>
    </target>
  

    <target name="-post-compile-single">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target depends="init,deps-jar,-pre-pre-compile,-pre-compile-single,-do-compile-single,-post-compile-single" name="compile-single"/>
    <property name="jspc.schemas" value="/resources/schemas/"/>
    <property name="jspc.dtds" value="/resources/dtds/"/>
    <target depends="compile" description="Test compile JSP pages to expose compilation errors." if="do.compile.jsps" name="compile-jsps">
        <mkdir dir="${build.generated.dir}/src"/>
        <java classname="org.netbeans.modules.web.project.ant.JspC" failonerror="true" fork="true">
            <arg value="-uriroot"/>
            <arg file="${basedir}/${build.web.dir}"/>
            <arg value="-d"/>
            <arg file="${basedir}/${build.generated.dir}/src"/>
            <arg value="-die1"/>
            <arg value="-schemas ${jspc.schemas}"/>
            <arg value="-dtds ${jspc.dtds}"/>
            <arg value="-compilerSourceVM ${javac.source}"/>
            <arg value="-compilerTargetVM ${javac.target}"/>
            <arg value="-javaEncoding ${source.encoding}"/>
            <arg value="-sysClasspath ${libs.jsp-compilation-syscp.classpath}"/>
            <classpath path="${java.home}/../lib/tools.jar:${libs.jsp-compiler.classpath}:${libs.jsp-compilation.classpath}"/>
        </java>
        <mkdir dir="${build.generated.dir}/classes"/>
        <webproject2:javac classpath="${build.classes.dir}:${libs.jsp-compilation.classpath}:${javac.classpath}:${j2ee.platform.classpath}" destdir="${build.generated.dir}/classes" srcdir="${build.generated.dir}/src"/>
    </target>
    <target depends="compile" if="jsp.includes" name="-do-compile-single-jsp">
        <fail unless="javac.jsp.includes">Must select some files in the IDE or set javac.jsp.includes</fail>
        <mkdir dir="${build.generated.dir}/src"/>
        <java classname="org.netbeans.modules.web.project.ant.JspCSingle" failonerror="true" fork="true">
            <arg value="-uriroot"/>
            <arg file="${basedir}/${build.web.dir}"/>
            <arg value="-d"/>
            <arg file="${basedir}/${build.generated.dir}/src"/>
            <arg value="-die1"/>
            <arg value="-schemas ${jspc.schemas}"/>
            <arg value="-dtds ${jspc.dtds}"/>
            <arg value="-sysClasspath ${libs.jsp-compilation-syscp.classpath}"/>
            <arg value="-jspc.files"/>
            <arg path="${jsp.includes}"/>
            <arg value="-compilerSourceVM ${javac.source}"/>
            <arg value="-compilerTargetVM ${javac.target}"/>
            <arg value="-javaEncoding ${source.encoding}"/>
            <classpath path="${java.home}/../lib/tools.jar:${libs.jsp-compiler.classpath}:${libs.jsp-compilation.classpath}"/>
        </java>
        <mkdir dir="${build.generated.dir}/classes"/>
        <webproject2:javac classpath="${build.classes.dir}:${libs.jsp-compilation.classpath}:${javac.classpath}:${j2ee.platform.classpath}" destdir="${build.generated.dir}/classes" srcdir="${build.generated.dir}/src">
            <customize>
                <patternset includes="${javac.jsp.includes}"/>
            </customize>
        </webproject2:javac>
    </target>
    <target name="compile-single-jsp">
        <fail unless="jsp.includes">Must select a file in the IDE or set jsp.includes</fail>
        <antcall target="-do-compile-single-jsp"/>
    </target>
    <!--
                DIST BUILDING SECTION
            -->
    <target name="-pre-dist">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target depends="init,compile,compile-jsps,-pre-dist" if="do.war.package.without.custom.manifest" name="-do-dist-without-manifest">
        <dirname file="${dist.war}" property="dist.jar.dir"/>
        <mkdir dir="${dist.jar.dir}"/>
        <jar compress="${jar.compress}" jarfile="${dist.war}">
            <fileset dir="${build.web.dir}" excludes="WEB-INF/classes/.netbeans_*,${dist.archive.excludes}"/>
        </jar>
    </target>
    <target depends="init,compile,compile-jsps,-pre-dist" if="do.war.package.with.custom.manifest" name="-do-dist-with-manifest">
        <dirname file="${dist.war}" property="dist.jar.dir"/>
        <mkdir dir="${dist.jar.dir}"/>
        <jar compress="${jar.compress}" jarfile="${dist.war}" manifest="${build.meta.inf.dir}/MANIFEST.MF">
            <fileset dir="${build.web.dir}" excludes="WEB-INF/classes/.netbeans_*,${dist.archive.excludes}"/>
        </jar>
    </target>
    <target depends="init,compile,compile-jsps,-pre-dist" if="do.tmp.war.package.without.custom.manifest" name="-do-tmp-dist-without-manifest">
        <dirname file="${dist.war}" property="dist.jar.dir"/>
        <mkdir dir="${dist.jar.dir}"/>
        <jar compress="${jar.compress}" jarfile="${dist.war}">
            <fileset dir="${build.web.dir}" excludes="WEB-INF/classes/.netbeans_*,${dist.archive.excludes}"/>
        </jar>
    </target>
    <target depends="init,compile,compile-jsps,-pre-dist" if="do.tmp.war.package.with.custom.manifest" name="-do-tmp-dist-with-manifest">
        <dirname file="${dist.war}" property="dist.jar.dir"/>
        <mkdir dir="${dist.jar.dir}"/>
        <jar compress="${jar.compress}" jarfile="${dist.war}" manifest="${build.meta.inf.dir}/MANIFEST.MF">
            <fileset dir="${build.web.dir}" excludes="WEB-INF/classes/.netbeans_*,${dist.archive.excludes}"/>
        </jar>
    </target>
    <target depends="init,compile,compile-jsps,-pre-dist,-do-dist-with-manifest,-do-dist-without-manifest" name="do-dist"/>
    <target depends="init" if="dist.ear.dir" name="library-inclusion-in-manifest">
        <copyfiles files="${file.reference.dmtpserv.jar}" iftldtodir="${build.web.dir}/WEB-INF" todir="${dist.ear.dir}/lib"/>
        <copyfiles files="${libs.javaee-web-api-7.0.classpath}" iftldtodir="${build.web.dir}/WEB-INF" todir="${dist.ear.dir}/lib"/>
        <copyfiles files="${file.reference.lib-gtsopt}" iftldtodir="${build.web.dir}/WEB-INF" todir="${dist.ear.dir}/lib"/>
        <copyfiles files="${libs.javaee-api-7.0.classpath}" iftldtodir="${build.web.dir}/WEB-INF" todir="${dist.ear.dir}/lib"/>
        <mkdir dir="${build.web.dir}/META-INF"/>
        <manifest file="${build.web.dir}/META-INF/MANIFEST.MF" mode="update"/>
    </target>
    <target depends="init" name="library-inclusion-in-archive" unless="dist.ear.dir">
        <copyfiles files="${file.reference.dmtpserv.jar}" todir="${build.web.dir}/WEB-INF/lib"/>
        <copyfiles files="${libs.javaee-web-api-7.0.classpath}" todir="${build.web.dir}/WEB-INF/lib"/>
        <copyfiles files="${file.reference.lib-gtsopt}" todir="${build.web.dir}/WEB-INF/classes"/>
        <copyfiles files="${libs.javaee-api-7.0.classpath}" todir="${build.web.dir}/WEB-INF/lib"/>
    </target>
    <target depends="init" if="dist.ear.dir" name="-clean-webinf-lib">
        <delete dir="${build.web.dir}/WEB-INF/lib"/>
    </target>
    <target depends="init,-clean-webinf-lib,compile,compile-jsps,-pre-dist,library-inclusion-in-manifest" if="do.tmp.war.package" name="do-ear-dist">
        <dirname file="${dist.ear.war}" property="dist.jar.dir"/>
        <mkdir dir="${dist.jar.dir}"/>
        <jar compress="${jar.compress}" jarfile="${dist.ear.war}" manifest="${build.web.dir}/META-INF/MANIFEST.MF">
            <fileset dir="${build.web.dir}" excludes="WEB-INF/classes/.netbeans_*,${dist.archive.excludes}"/>
        </jar>
    </target>
    <target name="-post-dist">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target depends="init,compile,-pre-dist,do-dist,-post-dist" description="Build distribution (WAR)." name="dist"/>
    <target depends="init,-clean-webinf-lib,-init-cos,compile,-pre-dist,do-ear-dist,-post-dist" description="Build distribution (WAR) to be packaged into an EAR." name="dist-ear"/>
    <!--
                EXECUTION SECTION
            -->
    <target depends="run-deploy,run-display-browser" description="Deploy to server and show in browser." name="run"/>
    <target name="-pre-run-deploy">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target name="-post-run-deploy">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target name="-pre-nbmodule-run-deploy">
        <!-- Empty placeholder for easier customization. -->
        <!-- This target can be overriden by NetBeans modules. Don't override it directly, use -pre-run-deploy task instead. -->
    </target>
    <target name="-post-nbmodule-run-deploy">
        <!-- Empty placeholder for easier customization. -->
        <!-- This target can be overriden by NetBeans modules. Don't override it directly, use -post-run-deploy task instead. -->
    </target>
    <target name="-run-deploy-am">
        <!-- Task to deploy to the Access Manager runtime. -->
    </target>
    <target depends="init,-init-cos,compile,compile-jsps,-do-compile-single-jsp,-pre-dist,-do-tmp-dist-with-manifest,-do-tmp-dist-without-manifest,-pre-run-deploy,-pre-nbmodule-run-deploy,-run-deploy-nb,-init-deploy-ant,-deploy-ant,-run-deploy-am,-post-nbmodule-run-deploy,-post-run-deploy,-do-update-breakpoints" name="run-deploy"/>
    <target if="netbeans.home" name="-run-deploy-nb">
        <nbdeploy clientUrlPart="${client.urlPart}" debugmode="false" forceRedeploy="${forceRedeploy}"/>
    </target>
    <target name="-init-deploy-ant" unless="netbeans.home">
        <property name="deploy.ant.archive" value="${dist.war}"/>
        <property name="deploy.ant.docbase.dir" value="${web.docbase.dir}"/>
        <property name="deploy.ant.resource.dir" value="${resource.dir}"/>
        <property name="deploy.ant.enabled" value="true"/>
    </target>
    <target depends="dist,-run-undeploy-nb,-init-deploy-ant,-undeploy-ant" name="run-undeploy"/>
    <target if="netbeans.home" name="-run-undeploy-nb">
        <fail message="Undeploy is not supported from within the IDE"/>
    </target>
    <target depends="init,-pre-dist,dist,-post-dist" name="verify">
        <nbverify file="${dist.war}"/>
    </target>
    <target depends="run-deploy,-init-display-browser,-display-browser-nb-old,-display-browser-nb,-display-browser-cl" name="run-display-browser"/>
    <target if="do.display.browser" name="-init-display-browser">
        <condition property="do.display.browser.nb.old">
            <and>
                <isset property="netbeans.home"/>
                <not>
                    <isset property="browser.context"/>
                </not>
            </and>
        </condition>
        <condition property="do.display.browser.nb">
            <and>
                <isset property="netbeans.home"/>
                <isset property="browser.context"/>
            </and>
        </condition>
        <condition property="do.display.browser.cl">
            <isset property="deploy.ant.enabled"/>
        </condition>
    </target>
    <target if="do.display.browser.nb.old" name="-display-browser-nb-old">
        <nbbrowse url="${client.url}"/>
    </target>
    <target if="do.display.browser.nb" name="-display-browser-nb">
        <nbbrowse context="${browser.context}" url="${client.url}" urlPath="${client.urlPart}"/>
    </target>
    <target if="do.display.browser.cl" name="-get-browser" unless="browser">
        <condition property="browser" value="rundll32">
            <os family="windows"/>
        </condition>
        <condition else="" property="browser.args" value="url.dll,FileProtocolHandler">
            <os family="windows"/>
        </condition>
        <condition property="browser" value="/usr/bin/open">
            <os family="mac"/>
        </condition>
        <property environment="env"/>
        <condition property="browser" value="${env.BROWSER}">
            <isset property="env.BROWSER"/>
        </condition>
        <condition property="browser" value="/usr/bin/firefox">
            <available file="/usr/bin/firefox"/>
        </condition>
        <condition property="browser" value="/usr/local/firefox/firefox">
            <available file="/usr/local/firefox/firefox"/>
        </condition>
        <condition property="browser" value="/usr/bin/mozilla">
            <available file="/usr/bin/mozilla"/>
        </condition>
        <condition property="browser" value="/usr/local/mozilla/mozilla">
            <available file="/usr/local/mozilla/mozilla"/>
        </condition>
        <condition property="browser" value="/usr/sfw/lib/firefox/firefox">
            <available file="/usr/sfw/lib/firefox/firefox"/>
        </condition>
        <condition property="browser" value="/opt/csw/bin/firefox">
            <available file="/opt/csw/bin/firefox"/>
        </condition>
        <condition property="browser" value="/usr/sfw/lib/mozilla/mozilla">
            <available file="/usr/sfw/lib/mozilla/mozilla"/>
        </condition>
        <condition property="browser" value="/opt/csw/bin/mozilla">
            <available file="/opt/csw/bin/mozilla"/>
        </condition>
    </target>
    <target depends="-get-browser" if="do.display.browser.cl" name="-display-browser-cl">
        <fail unless="browser">
                    Browser not found, cannot launch the deployed application. Try to set the BROWSER environment variable.
                </fail>
        <property name="browse.url" value="${deploy.ant.client.url}${client.urlPart}"/>
        <echo>Launching ${browse.url}</echo>
        <exec executable="${browser}" spawn="true">
            <arg line="${browser.args} ${browse.url}"/>
        </exec>
    </target>
    <target depends="init,-init-cos,compile-single" name="run-main">
        <fail unless="run.class">Must select one file in the IDE or set run.class</fail>
        <webproject1:java classname="${run.class}"/>
    </target>
    <target depends="init,compile-test-single,-pre-test-run-single" name="run-test-with-main">
        <fail unless="run.class">Must select one file in the IDE or set run.class</fail>
        <webproject1:java classname="${run.class}" classpath="${run.test.classpath}"/>
    </target>
    <target depends="init" if="netbeans.home" name="-do-update-breakpoints">
        <webproject1:nbjpdaappreloaded/>
    </target>
    <!--
                DEBUGGING SECTION
            -->
    <target depends="init,-init-cos,compile,compile-jsps,-do-compile-single-jsp,-pre-dist,-do-tmp-dist-with-manifest,-do-tmp-dist-without-manifest" description="Debug project in IDE." if="netbeans.home" name="debug">
        <nbstartserver debugmode="true"/>
        <antcall target="connect-debugger"/>
        <nbdeploy clientUrlPart="${client.urlPart}" debugmode="true" forceRedeploy="true"/>
        <antcall target="debug-display-browser-old"/>
        <antcall target="debug-display-browser"/>
        <antcall target="connect-client-debugger"/>
    </target>
    <target if="do.debug.server" name="connect-debugger" unless="is.debugged">
        <condition property="listeningcp" value="sourcepath">
            <istrue value="${j2ee.compile.on.save}"/>
        </condition>
        <nbjpdaconnect address="${jpda.address}" host="${jpda.host}" listeningcp="${listeningcp}" name="${name}" transport="${jpda.transport}">
            <classpath>
                <path path="${debug.classpath}:${j2ee.platform.classpath}"/>
            </classpath>
            <sourcepath>
                <path path="${web.docbase.dir}"/>
            </sourcepath>
        </nbjpdaconnect>
    </target>
    <target if="do.display.browser.debug.old" name="debug-display-browser-old">
        <nbbrowse url="${client.url}"/>
    </target>
    <target if="do.display.browser.debug" name="debug-display-browser">
        <nbbrowse context="${browser.context}" url="${client.url}" urlPath="${client.urlPart}"/>
    </target>
    <target if="do.debug.client" name="connect-client-debugger">
        <webproject1:nbjsdebugstart webUrl="${client.url}"/>
    </target>
    <target depends="init,compile-test-single" if="netbeans.home" name="-debug-start-debuggee-main-test">
        <fail unless="debug.class">Must select one file in the IDE or set debug.class</fail>
        <webproject1:debug classname="${debug.class}" classpath="${debug.test.classpath}"/>
    </target>
    <target depends="init,compile-test-single,-debug-start-debugger-main-test,-debug-start-debuggee-main-test" if="netbeans.home" name="debug-test-with-main"/>
    <target depends="init,compile,compile-jsps,-do-compile-single-jsp,debug" if="netbeans.home" name="debug-single"/>
    <target depends="init" if="netbeans.home" name="-debug-start-debugger-main-test">
        <webproject1:nbjpdastart classpath="${debug.test.classpath}" name="${debug.class}"/>
    </target>
    <target depends="init" if="netbeans.home" name="-debug-start-debugger">
        <webproject1:nbjpdastart name="${debug.class}"/>
    </target>
    <target depends="init,compile-single" if="netbeans.home" name="-debug-start-debuggee-single">
        <fail unless="debug.class">Must select one file in the IDE or set debug.class</fail>
        <webproject1:debug classname="${debug.class}"/>
    </target>
    <target depends="init,compile-single,-debug-start-debugger,-debug-start-debuggee-single" if="netbeans.home" name="debug-single-main"/>
    <target depends="init" name="-pre-debug-fix">
        <fail unless="fix.includes">Must set fix.includes</fail>
        <property name="javac.includes" value="${fix.includes}.java"/>
    </target>
    <target depends="init,-pre-debug-fix,compile-single" if="netbeans.home" name="-do-debug-fix">
        <webproject1:nbjpdareload/>
    </target>
    <target depends="init,-pre-debug-fix,-do-debug-fix" if="netbeans.home" name="debug-fix"/>
    <!--
            =================
            PROFILING SECTION
            =================
            -->
    <!--
                pre NB7.2 profiling section; consider it deprecated
            -->
    <target description="Profile a J2EE project in the IDE." if="profiler.info.jvmargs.agent" name="-profile-pre72">
        <condition else="start-profiled-server" property="profiler.startserver.target" value="start-profiled-server-extraargs">
            <isset property="profiler.info.jvmargs.extra"/>
        </condition>
        <antcall target="${profiler.startserver.target}"/>
        <antcall target="run"/>
        <antcall target="-profile-start-loadgen"/>
    </target>
    <target if="profiler.info.jvmargs.agent" name="start-profiled-server">
        <nbstartprofiledserver forceRestart="${profiler.j2ee.serverForceRestart}" javaPlatform="${profiler.info.javaPlatform}" startupTimeout="${profiler.j2ee.serverStartupTimeout}">
            <jvmarg value="${profiler.info.jvmargs.agent}"/>
            <jvmarg value="${profiler.j2ee.agentID}"/>
        </nbstartprofiledserver>
    </target>
    <target if="profiler.info.jvmargs.agent" name="start-profiled-server-extraargs">
        <nbstartprofiledserver forceRestart="${profiler.j2ee.serverForceRestart}" javaPlatform="${profiler.info.javaPlatform}" startupTimeout="${profiler.j2ee.serverStartupTimeout}">
            <jvmarg value="${profiler.info.jvmargs.extra}"/>
            <jvmarg value="${profiler.info.jvmargs.agent}"/>
            <jvmarg value="${profiler.j2ee.agentID}"/>
        </nbstartprofiledserver>
    </target>
    <target depends="profile-init,compile-test-single" if="profiler.info.jvmargs.agent" name="-profile-test-single-pre72">
        <fail unless="netbeans.home">This target only works when run from inside the NetBeans IDE.</fail>
        <nbprofiledirect>
            <classpath>
                <path path="${run.test.classpath}"/>
                <path path="${j2ee.platform.classpath}"/>
            </classpath>
        </nbprofiledirect>
        <junit dir="${profiler.info.dir}" errorproperty="tests.failed" failureproperty="tests.failed" fork="true" jvm="${profiler.info.jvm}" showoutput="true">
            <env key="${profiler.info.pathvar}" path="${profiler.info.agentpath}:${profiler.current.path}"/>
            <jvmarg value="${profiler.info.jvmargs.agent}"/>
            <jvmarg line="${profiler.info.jvmargs}"/>
            <test name="${profile.class}"/>
            <classpath>
                <path path="${run.test.classpath}"/>
                <path path="${j2ee.platform.classpath}"/>
            </classpath>
            <syspropertyset>
                <propertyref prefix="test-sys-prop."/>
                <mapper from="test-sys-prop.*" to="*" type="glob"/>
            </syspropertyset>
            <formatter type="brief" usefile="false"/>
            <formatter type="xml"/>
        </junit>
    </target>
    <target if="netbeans.home" name="-profile-check">
        <condition property="profiler.configured">
            <or>
                <contains casesensitive="true" string="${run.jvmargs.ide}" substring="-agentpath:"/>
                <contains casesensitive="true" string="${run.jvmargs.ide}" substring="-javaagent:"/>
            </or>
        </condition>
    </target>
    <target depends="init,-init-cos,compile,compile-jsps,-do-compile-single-jsp,-pre-dist,-do-tmp-dist-with-manifest,-do-tmp-dist-without-manifest" name="-do-profile">
        <startprofiler/>
        <nbstartserver profilemode="true"/>
        <nbdeploy clientUrlPart="${client.urlPart}" forceRedeploy="true" profilemode="true"/>
        <antcall target="debug-display-browser-old"/>
        <antcall target="debug-display-browser"/>
        <antcall target="-profile-start-loadgen"/>
    </target>
    <target depends="-profile-check,-profile-pre72" description="Profile a J2EE project in the IDE." if="profiler.configured" name="profile" unless="profiler.info.jvmargs.agent">
        <antcall target="-do-profile"/>
    </target>
    <target depends="-profile-test-single-pre72" name="profile-test-single"/>
    <target depends="-profile-check" if="profiler.configured" name="profile-test" unless="profiler.info.jvmargs.agent">
        <startprofiler/>
        <antcall target="test-single"/>
    </target>
    <target if="profiler.loadgen.path" name="-profile-start-loadgen">
        <loadgenstart path="${profiler.loadgen.path}"/>
    </target>
    <!--
                JAVADOC SECTION
            -->
    <target depends="init" if="have.sources" name="javadoc-build">
        <mkdir dir="${dist.javadoc.dir}"/>
        <javadoc additionalparam="${javadoc.additionalparam}" author="${javadoc.author}" charset="UTF-8" destdir="${dist.javadoc.dir}" docencoding="UTF-8" encoding="${javadoc.encoding.used}" failonerror="true" noindex="${javadoc.noindex}" nonavbar="${javadoc.nonavbar}" notree="${javadoc.notree}" private="${javadoc.private}" source="${javac.source}" splitindex="${javadoc.splitindex}" use="${javadoc.use}" useexternalfile="true" version="${javadoc.version}" windowtitle="${javadoc.windowtitle}">
            <classpath>
                <path path="${javac.classpath}:${j2ee.platform.classpath}"/>
            </classpath>
            <fileset dir="${src.dir}" excludes="${excludes}" includes="${includes}">
                <filename name="**/*.java"/>
            </fileset>
            <fileset dir="${build.generated.sources.dir}" erroronmissingdir="false">
                <include name="**/*.java"/>
            </fileset>
        </javadoc>
        <copy todir="${dist.javadoc.dir}">
            <fileset dir="${src.dir}" excludes="${excludes}" includes="${includes}">
                <filename name="**/doc-files/**"/>
            </fileset>
            <fileset dir="${build.generated.sources.dir}" erroronmissingdir="false">
                <include name="**/doc-files/**"/>
            </fileset>
        </copy>
    </target>
    <target depends="init,javadoc-build" if="netbeans.home" name="javadoc-browse" unless="no.javadoc.preview">
        <nbbrowse file="${dist.javadoc.dir}/index.html"/>
    </target>
    <target depends="init,javadoc-build,javadoc-browse,javadocs" description="Build Javadoc." name="javadoc"/>
    <!--
                
                TEST COMPILATION SECTION
            -->
    <target depends="init,compile" if="have.tests" name="-pre-pre-compile-test">
        <mkdir dir="${build.test.classes.dir}"/>
        <property name="j2ee.platform.embeddableejb.classpath" value=""/>
    </target>
    <target name="-pre-compile-test">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target depends="init,compile,-pre-pre-compile-test,-pre-compile-test" if="have.tests" name="-do-compile-test">
        <webproject2:javac classpath="${javac.test.classpath}:${j2ee.platform.classpath}:${j2ee.platform.embeddableejb.classpath}" debug="true" destdir="${build.test.classes.dir}" srcdir="${test.src.dir}"/>
        <copy todir="${build.test.classes.dir}">
            <fileset dir="${test.src.dir}" excludes="${build.classes.excludes},${excludes}" includes="${includes}"/>
        </copy>
    </target>
    <target name="-post-compile-test">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target depends="init,compile,-pre-pre-compile-test,-pre-compile-test,-do-compile-test,-post-compile-test" name="compile-test"/>
    <target name="-pre-compile-test-single">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target depends="init,compile,-pre-pre-compile-test,-pre-compile-test-single" if="have.tests" name="-do-compile-test-single">
        <fail unless="javac.includes">Must select some files in the IDE or set javac.includes</fail>
        <webproject2:javac classpath="${javac.test.classpath}:${j2ee.platform.classpath}:${j2ee.platform.embeddableejb.classpath}" debug="true" destdir="${build.test.classes.dir}" excludes="" includes="${javac.includes}" srcdir="${test.src.dir}"/>
        <copy todir="${build.test.classes.dir}">
            <fileset dir="${test.src.dir}" excludes="${build.classes.excludes},${excludes}" includes="${includes}"/>
        </copy>
    </target>
    <target name="-post-compile-test-single">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target depends="init,compile,-pre-pre-compile-test,-pre-compile-test-single,-do-compile-test-single,-post-compile-test-single" name="compile-test-single"/>
    <!--
                
                TEST EXECUTION SECTION
            -->
    <target depends="init" if="have.tests" name="-pre-test-run">
        <mkdir dir="${build.test.results.dir}"/>
    </target>
    <target depends="init,compile-test,-pre-test-run" if="have.tests" name="-do-test-run">
        <webproject2:test includes="${includes}" testincludes="**/*Test.java"/>
    </target>
    <target depends="init,compile-test,-pre-test-run,-do-test-run" if="have.tests" name="-post-test-run">
        <fail if="tests.failed" unless="ignore.failing.tests">Some tests failed; see details above.</fail>
    </target>
    <target depends="init" if="have.tests" name="test-report"/>
    <target depends="init" if="netbeans.home+have.tests" name="-test-browse"/>
    <target depends="init,compile-test,-pre-test-run,-do-test-run,test-report,-post-test-run,-test-browse" description="Run unit tests." name="test"/>
    <target depends="init" if="have.tests" name="-pre-test-run-single">
        <mkdir dir="${build.test.results.dir}"/>
    </target>
    <target depends="init,compile-test-single,-pre-test-run-single" if="have.tests" name="-do-test-run-single">
        <fail unless="test.includes">Must select some files in the IDE or set test.includes</fail>
        <webproject2:test excludes="" includes="${test.includes}" testincludes="${test.includes}"/>
    </target>
    <target depends="init,compile-test-single,-pre-test-run-single,-do-test-run-single" if="have.tests" name="-post-test-run-single">
        <fail if="tests.failed" unless="ignore.failing.tests">Some tests failed; see details above.</fail>
    </target>
    <target depends="init,compile-test-single,-pre-test-run-single,-do-test-run-single,-post-test-run-single" description="Run single unit test." name="test-single"/>
    <target depends="init,compile-test-single,-pre-test-run-single" if="have.tests" name="-do-test-run-single-method">
        <fail unless="test.class">Must select some files in the IDE or set test.class</fail>
        <fail unless="test.method">Must select some method in the IDE or set test.method</fail>
        <webproject2:test excludes="" includes="${javac.includes}" testincludes="${test.class}" testmethods="${test.method}"/>
    </target>
    <target depends="init,compile-test-single,-pre-test-run-single,-do-test-run-single-method" if="have.tests" name="-post-test-run-single-method">
        <fail if="tests.failed" unless="ignore.failing.tests">Some tests failed; see details above.</fail>
    </target>
    <target depends="init,compile-test-single,-pre-test-run-single,-do-test-run-single-method,-post-test-run-single-method" description="Run single unit test." name="test-single-method"/>
    <!--
                
                TEST DEBUGGING SECTION
            -->
    <target depends="init,compile-test-single,-pre-test-run-single" if="have.tests" name="-debug-start-debuggee-test">
        <fail unless="test.class">Must select one file in the IDE or set test.class</fail>
        <webproject2:test-debug excludes="" includes="${javac.includes}" testClass="${test.class}" testincludes="${javac.includes}"/>
    </target>
    <target depends="init,compile-test-single,-pre-test-run-single" if="have.tests" name="-debug-start-debuggee-test-method">
        <fail unless="test.class">Must select one file in the IDE or set test.class</fail>
        <fail unless="test.method">Must select some method in the IDE or set test.method</fail>
        <webproject2:test-debug excludes="" includes="${javac.includes}" testClass="${test.class}" testMethod="${test.method}" testincludes="${test.class}" testmethods="${test.method}"/>
    </target>
    <target depends="init,compile-test" if="netbeans.home+have.tests" name="-debug-start-debugger-test">
        <webproject1:nbjpdastart classpath="${debug.test.classpath}" name="${test.class}"/>
    </target>
    <target depends="init,compile-test,-debug-start-debugger-test,-debug-start-debuggee-test" name="debug-test"/>
    <target depends="init,compile-test-single,-debug-start-debugger-test,-debug-start-debuggee-test-method" name="debug-test-method"/>
    <target depends="init,-pre-debug-fix,compile-test-single" if="netbeans.home" name="-do-debug-fix-test">
        <webproject1:nbjpdareload dir="${build.test.classes.dir}"/>
    </target>
    <target depends="init,-pre-debug-fix,-do-debug-fix-test" if="netbeans.home" name="debug-fix-test"/>
    <!--
                
        CLEANUP SECTION
    -->
    <target depends="init" name="deps-clean" unless="no.deps"/>
    <target depends="init" name="do-clean">
        <condition property="build.dir.to.clean" value="${build.web.dir}">
            <isset property="dist.ear.dir"/>
        </condition>
        <property name="build.dir.to.clean" value="${build.web.dir}"/>
        <delete includeEmptyDirs="true" quiet="true">
            <fileset dir="${build.dir.to.clean}/WEB-INF/lib"/>
        </delete>
        <delete dir="${build.dir}"/>
        <available file="${build.dir.to.clean}/WEB-INF/lib" property="status.clean-failed" type="dir"/>
        <delete dir="${dist.dir}"/>
    </target>
    <target depends="do-clean" if="status.clean-failed" name="check-clean">
        <echo message="Warning: unable to delete some files in ${build.web.dir}/WEB-INF/lib - they are probably locked by the J2EE server. "/>
        <echo level="info" message="To delete all files undeploy the module from Server Registry in Runtime tab and then use Clean again."/>
    </target>
    <target depends="init" if="netbeans.home" name="undeploy-clean">
        <nbundeploy failOnError="false" startServer="false"/>
    </target>
    <target name="-post-clean">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target depends="init,undeploy-clean,deps-clean,do-clean,check-clean,-post-clean" description="Clean build products." name="clean">
        <delete dir="${build.home}"/>
    </target>
    <target depends="clean" description="Clean build products." name="clean-ear"/>
</project>
